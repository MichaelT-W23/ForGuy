{
    "Info": [
        {
            "title": "Interact with a Flash Drive Using Python",
            "desc": "Explains how to perform operations on a Flash Drive using Python.",
            "ref": "flash-drive"
        }
    ],
    "Instructions": [
        {
            "id": 1,
            "instruction": "If you don't already have a flash drive/USB-C to USB-A adapter cord, I'd recommend purchasing the following. <br><br><u>Flash Drive</u>: [Amazon Link](https://www.amazon.com/PNY-Turbo-128GB-Flash-Drive/dp/B00FE2N1WS/?th=1)<br><br><u>Adapter Cord</u>: [Amazon Link](https://www.amazon.com/dp/B01GGKYXVE?ref=ppx_yo2ov_dt_b_product_details&th=1)</br><br>"
        },
        {
            "id": 2,
            "instruction": "Find the name of your flash_drive by running the following commands. In the output of the \"ls\" command you should see a volume named something like \"USBMST1\". Copy and record the name",
            "Code": {
                "Name": "",
                "Description": "",
                "Language": "Command",
                "FormatCode": "cd /Volumes\nls",
                "CopyCode": "cd /Volumes\nls"
            }
        },
        {
            "id": 3,
            "instruction": "Move back to your root directory using the following command ",
            "Code": {
                "Name": "",
                "Description": "",
                "Language": "Command",
                "FormatCode": "cd ~",
                "CopyCode": "cd ~"
            }
        },
        {
            "id": 4,
            "instruction": "Now run the following command. In the output look for the name of the flask drive that you copied in step 1. Then copy and record the value under the \"IDENTIFIER\" categrory in the same row as your Flask drive name. It should look something like \"disk8s1\".",
            "Code": {
                "Name": "",
                "Description": "",
                "Language": "Command",
                "FormatCode": "diskutil list",
                "CopyCode": "diskutil list"
            }
        },
        {
            "id": 5,
            "instruction": "Press \"command + k\" to clear your terminal output. Then create the following folder and files.",
            "Code": {
                "Name": "",
                "Description": "",
                "Language": "Command",
                "FormatCode": "pip3 install termcolor\nmkdir FlashDrive\ncd FlashDrive\ntouch flash_drive.py\ntouch data.json",
                "CopyCode": "pip3 install termcolor\nmkdir FlashDrive\ncd FlashDrive\ntouch flash_drive.py\ntouch data.json"
            }
        },
        {
            "id": 6,
            "instruction": "Open your FlashDrive directory in VSCode. Then open the \"data.json\" file. In the file paste in the following JSON. Then make the \"Name\" attributes value, the name you copied in step 1. Note it shouldn't be the path, just the name. Then make the value of \"Identifier\" attribute the identifier you copied in step 3.",
            "Code": {
                "Name": "",
                "Description": "",
                "Language": "JSON",
                "FormatCode": "{\n    \"Name\": \"\",\n    \"Identifier\": \"\"\n}",
                "CopyCode": "{\n    \"Name\": \"\",\n    \"Identifier\": \"\"\n}"
            }
        },
        {
            "id": 7,
            "instruction": "Now open the \"flash_drive.py\" file and paste in the following code.",
            "Code": {
                "Name": "",
                "Description": "",
                "Language": "Python",
                "FormatCode": "import json\nimport os\nimport shutil\nimport subprocess\nimport time\nfrom termcolor import colored as c\n\nclass FlashDrive:\n    \"\"\" \n    Class to perform various flash drive operations\n\n    Methods \n    open_flash_drive_in_finder: Opens flash drive path in Finder \n    add_file_to_flash_drive: Adds a file/folder to the flash drive\n    delete_file_on_flash_drive: Deletes file from flash drive\n    unmount_drive: Unmounts drive from computer \n    remount_drive: Remounts drive from computer \n    eject_drive: ejects drive from computer \n    get_all_files: Gets all the files from the flash drive as a list.\n    explain_unmount_and_eject: Explains the difference between unmounting and ejecting a Flash Drive.\n    \n    Example code at the bottom of this file.\n    \"\"\"\n\n    def __init__(self, flash_drive_name: str, flash_drive_identifier: str):\n        \"\"\"\n        Initializes the flash drives path and identifier \n        :param flash_drive_name: Name of the flash drive ex: USBMST1\n        :param flash_drive_identifier: Identifies the flash drive to eject it. Ex: /dev/disk4\n        \"\"\"\n        self.flash_drive_path = f\"/Volumes/{flash_drive_name}\"\n\n        # Flash drive identifier. Find this path using the command: diskutil list\n        self.flash_drive_identifier = flash_drive_identifier\n\n\n    def open_flash_drive_in_finder(self):\n        \"\"\"\n        Opens flash drive directory in Finder. If error \n        occurs because flash drive can't be found print the \n        error in red.\n        \"\"\"\n        command = [\"open\", self.flash_drive_path]\n        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n\n        if result.returncode != 0:\n            print(c(result.stderr.strip(), 'red'))\n        else:\n            print(c(\"Flash Drive's Content is being displayed in Finder!\\n\", 'blue'))\n\n\n    def add_file_to_flash_drive(self) -> None:\n        \"\"\"\n        Adds a file/folder to the flash drive.\n        \"\"\"\n\n        while True:\n            file_path = input(\"Please enter the path of the file/folder you want to add (or 'q' to quit): \")\n\n            if file_path.lower().strip() == 'q':\n                print(c(\"Operation cancelled.\", \"red\"))\n                time.sleep(1)\n                os.system('clear')\n                print_menu()\n                return\n\n            if os.path.isfile(file_path) or os.path.isdir(file_path):\n                print(c(\"File/folder path is valid.\", \"green\"))\n\n                confirm = input(f\"Are you sure you want to add \\\"{file_path}\\\" to your flash drive? (yes/y): \")\n\n                if confirm.lower().strip() in [\"yes\", \"y\"]:\n                    break\n                else:\n                    print(f\"The file/folder will {c('NOT', 'red')} be added to your flash drive. Please enter a new path.\")\n            else:\n                print(c(\"Invalid file/folder path. Please try again.\", \"red\"))\n\n        file_name = os.path.basename(file_path)\n        destination_path = os.path.join(self.flash_drive_path, file_name)\n\n        try:\n            if os.path.isfile(file_path):\n                shutil.copy(file_path, destination_path)\n            elif os.path.isdir(file_path):\n                shutil.copytree(file_path, destination_path)\n\n            print(c(f'The file/folder: \"{file_name}\" was successfully added to the flash drive. Destination: \"{destination_path}\"', \"green\"))\n            self.open_flash_drive_in_finder()\n        except Exception as e:\n            print(c(f'An error occurred while trying to add the file/folder to the flash drive: {str(e)}', 'red'))\n\n\n    def delete_file_on_flash_drive(self) -> None:\n        \"\"\"\n        Deletes a file or folder from the flash drive.\n        \"\"\"\n\n        while True:\n            self.open_flash_drive_in_finder()\n\n            all_files = self._get_files_recursive(self.flash_drive_path)\n            \n            if not all_files:\n                print(c(\"\\nThere are currently no files or folders on your Flash Drive.\", \"red\"))\n                return\n\n            file_path = input(\"Please enter the path of the file/folder you want to delete (or 'q' to quit): \")\n\n            if file_path.lower().strip() == 'q':\n                print(c(\"Operation cancelled.\", \"red\"))\n                time.sleep(1)\n                os.system('clear')\n                print_menu()\n                return\n\n            file_name = os.path.basename(file_path)\n            destination_file = os.path.join(self.flash_drive_path, file_name)\n\n            if os.path.exists(destination_file):\n                confirm = input(f\"Are you sure you want to delete \\\"{file_path}\\\" from your flash drive? (yes/y): \")\n\n                if confirm.lower().strip() in [\"yes\", \"y\"]:\n                    try:\n                        if os.path.isdir(destination_file):\n                            shutil.rmtree(destination_file)\n                        else:\n                            os.remove(destination_file)\n                        print(c(f'The file/folder: \"{file_path}\" was successfully removed from the flash drive!', 'green'))\n                    except Exception as e:\n                        print(f'Error occurred while trying to remove the file/folder from the flash drive: {str(e)}')\n                else:\n                    print(f'The file/folder: \"{file_path}\" will {c(\"NOT\", \"red\")} be deleted. Please enter a new path.')\n\n            else:\n                print(c(f\"Can't delete the file/folder: \\\"{file_path}\\\". Does not exist on flash drive.\", 'red'))\n\n\n    def unmount_drive(self) -> None:\n        \"\"\"\n        Unmounts the flash drive from the computer without full on \n        ejecting it. \n        \"\"\"\n\n        try:\n            command = ['diskutil', 'unmountDisk', self.flash_drive_identifier]\n            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n            \n            if result.stderr.strip():\n                print(c(result.stderr.strip(), 'red'))\n            else:\n                print(c(f\"Flash drive at '{self.flash_drive_identifier}' has been successfully unmounted!\\n\", 'green'))\n\n        except Exception as e:\n            print(c(f'Error occurred while unmounting the flash drive: {str(e)}', 'red'))\n\n    def remount_drive(self):\n        \"\"\"\n        Remounts the flash drive. Prints an error\n        if process can't be completed.\n        \"\"\"\n\n        try:\n            command = ['diskutil', 'mountDisk', self.flash_drive_identifier]\n            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n            \n            if result.stderr.strip():\n                print(c(result.stderr.strip(), 'red'))\n                print(c(\"Make sure you've physically removed your flash drive after the last ejection.\\n\", 'red'))\n                exit(0)\n            else:\n                print(c(f\"Flash drive at '{self.flash_drive_identifier}' has been successfully remounted!\\n\", 'green'))\n        except Exception as e:\n            print(c(f'Error occurred while remounting the flash drive: {str(e)}', 'red'))\n\n    def eject_drive(self) -> None:\n        \"\"\"\n        Ejects the flash drive from the computer.\n        \"\"\"\n\n        try:\n            command = ['diskutil', 'eject', self.flash_drive_identifier]\n            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n            \n            if result.stderr.strip():\n                print(c(result.stderr.strip(), 'red'))\n                print(c(\"Make sure to connect and mount your Flash Drive.\\n\", \"red\"))\n                exit(0)\n            else:\n                print(c(f\"Flash drive at '{self.flash_drive_identifier}' has been successfully ejected!\", 'green'))\n                print(c(\"Physically remove the flash drive from your computer to eject it completely.\\n\", 'blue'))\n                exit(0)\n\n        except Exception as e:\n            print(c(f'Error occurred while ejecting the flash drive: {str(e)}', 'red'))\n            exit(0)\n\n    def get_all_files(self) -> [str]:\n        \"\"\"\n        Gets all files from the drive and returns them as a string list. Doesn't include \n        hidden files.\n        \"\"\"\n        try:\n            if not os.path.exists(self.flash_drive_path):\n                print(c(\"The specified flash drive path does not exist.\\n\", \"red\"))\n                exit(0)\n\n            all_files = self._get_files_recursive(self.flash_drive_path)\n\n            if all_files:\n                print(\"\\nThese are all the Files on your Flash Drive:\")\n                for file in all_files:\n                    print(file)\n            else:\n                print(c(\"\\nThere are currently no files on your Flash Drive.\", \"red\"))\n                \n        except Exception as e:\n            print(f'Error occurred while getting files from the flash drive: {str(e)}')\n\n\n    def _get_files_recursive(self, path, level=0):\n        \"\"\"\n        Helper function to recursively get files and folders.\n        \"\"\"\n        items = []\n        try:\n            for entry in os.listdir(path):\n                if not entry.startswith('.'):\n                    full_path = os.path.join(path, entry)\n                    indent = '    ' * level\n\n                    if os.path.isdir(full_path):\n                        items.append(f\"{indent}{entry}\")\n                        items.extend(self._get_files_recursive(full_path, level + 1))\n                    else:\n                        items.append(f\"{indent}- {entry}\")\n\n        except Exception as e:\n            print(f'Error occurred while accessing the path {path}: {str(e)}')\n\n        return items\n    \n    def copy_file_to_new_location(self, old_file_name, new_path):\n        \"\"\"\n        Copys a file from the flash drive to a new location\n        :param old_file_name: The name of the file on the flash to be copied.\n        :param new_path: The new path the file will be copied to.\n        \"\"\"\n        fd_file_path = f\"{self.flash_drive_path}/{old_file_name}\"\n        os.system(f\"cp {fd_file_path} {new_path}\")\n\n    def explain_unmount_and_eject(self):\n        print(\"\\nDefinitions\")\n        print(f\"{c('Unmount', 'blue')}: Temporarily disconnect the Flash Drive logically, but not physically. Do this if you plan to reconnect Flash Drive without physically removing it first.\")\n        print(f\"{c('Eject', 'blue')}: Logically and Physically remove the Flash Drive\\n\") \n        \n        understood = input(\"Understood? (y/yes): \")\n\n        if understood.lower().strip() in [\"yes\", \"y\"]:\n            print(c(\"Great!\", \"green\"))\n            time.sleep(1)\n            os.system('clear')\n            print_menu()\n            return\n\ndef print_menu():\n    print(\"Flash Drive Options\")\n    print(\"1. Open flash drive contents in Finder \")\n    print(\"2. Add files/folders to your flash drive\")\n    print(\"3. Delete files from your flash drive\")\n    print(\"4. Unmount your flash drive\")\n    print(\"5. Remount your flash drive\")\n    print(\"6. Eject flash drive from your computer \")\n    print(\"7. Displays all the files from your flash drive\")\n    print(\"8. Explains unmounting vs ejecting a Flash Drive\\n\")\n\n\ndef choose_option(flash_drive, choice: int):\n    match choice:\n        case 1:\n            flash_drive.open_flash_drive_in_finder()\n        case 2:\n            flash_drive.add_file_to_flash_drive()\n        case 3:\n            flash_drive.delete_file_on_flash_drive()\n        case 4:\n            flash_drive.unmount_drive()\n        case 5:\n            flash_drive.remount_drive()\n        case 6:\n            flash_drive.eject_drive()\n        case 7:\n            flash_drive.get_all_files()\n        case 8:\n            flash_drive.explain_unmount_and_eject()\n        case _:\n            print(c(\"Invalid number\", \"red\"))\n\n\ndef get_flash_drive():\n\n    with open(\"data.json\", \"r\") as file:\n        content = json.load(file)\n        \n    name = content['Name']\n    identifier = content[\"Identifier\"]\n\n    return FlashDrive(name, identifier)\n\n\ndef prompt_user(flash_drive):\n    while True:\n        user_input = input(\"Choose an option 1-8 (or 'q' to quit): \")\n        \n        if user_input.lower() == 'q':\n            print(c(\"Program quite successfully\", \"green\"))\n            flash_drive.eject_drive()\n            break\n        \n        try:\n            user_number = int(user_input)\n            if 1 <= user_number <= 8:\n                choose_option(flash_drive, user_number)\n            else:\n                print(c(\"Invalid input. Please enter an integer between 1 and 8.\", \"red\"))\n        except ValueError:\n            print(c(\"Invalid input. Please enter an integer between 1 and 8.\", \"red\"))\n\n\ndef main():\n\n    flash_drive = get_flash_drive()\n\n    print_menu()\n    prompt_user(flash_drive)\n\nmain()",
                "CopyCode": "import json\nimport os\nimport shutil\nimport subprocess\nimport time\nfrom termcolor import colored as c\n\nclass FlashDrive:\n    \"\"\" \n    Class to perform various flash drive operations\n\n    Methods \n    open_flash_drive_in_finder: Opens flash drive path in Finder \n    add_file_to_flash_drive: Adds a file/folder to the flash drive\n    delete_file_on_flash_drive: Deletes file from flash drive\n    unmount_drive: Unmounts drive from computer \n    remount_drive: Remounts drive from computer \n    eject_drive: ejects drive from computer \n    get_all_files: Gets all the files from the flash drive as a list.\n    explain_unmount_and_eject: Explains the difference between unmounting and ejecting a Flash Drive.\n    \n    Example code at the bottom of this file.\n    \"\"\"\n\n    def __init__(self, flash_drive_name: str, flash_drive_identifier: str):\n        \"\"\"\n        Initializes the flash drives path and identifier \n        :param flash_drive_name: Name of the flash drive ex: USBMST1\n        :param flash_drive_identifier: Identifies the flash drive to eject it. Ex: /dev/disk4\n        \"\"\"\n        self.flash_drive_path = f\"/Volumes/{flash_drive_name}\"\n\n        # Flash drive identifier. Find this path using the command: diskutil list\n        self.flash_drive_identifier = flash_drive_identifier\n\n\n    def open_flash_drive_in_finder(self):\n        \"\"\"\n        Opens flash drive directory in Finder. If error \n        occurs because flash drive can't be found print the \n        error in red.\n        \"\"\"\n        command = [\"open\", self.flash_drive_path]\n        result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n\n        if result.returncode != 0:\n            print(c(result.stderr.strip(), 'red'))\n        else:\n            print(c(\"Flash Drive's Content is being displayed in Finder!\\n\", 'blue'))\n\n\n    def add_file_to_flash_drive(self) -> None:\n        \"\"\"\n        Adds a file/folder to the flash drive.\n        \"\"\"\n\n        while True:\n            file_path = input(\"Please enter the path of the file/folder you want to add (or 'q' to quit): \")\n\n            if file_path.lower().strip() == 'q':\n                print(c(\"Operation cancelled.\", \"red\"))\n                time.sleep(1)\n                os.system('clear')\n                print_menu()\n                return\n\n            if os.path.isfile(file_path) or os.path.isdir(file_path):\n                print(c(\"File/folder path is valid.\", \"green\"))\n\n                confirm = input(f\"Are you sure you want to add \\\"{file_path}\\\" to your flash drive? (yes/y): \")\n\n                if confirm.lower().strip() in [\"yes\", \"y\"]:\n                    break\n                else:\n                    print(f\"The file/folder will {c('NOT', 'red')} be added to your flash drive. Please enter a new path.\")\n            else:\n                print(c(\"Invalid file/folder path. Please try again.\", \"red\"))\n\n        file_name = os.path.basename(file_path)\n        destination_path = os.path.join(self.flash_drive_path, file_name)\n\n        try:\n            if os.path.isfile(file_path):\n                shutil.copy(file_path, destination_path)\n            elif os.path.isdir(file_path):\n                shutil.copytree(file_path, destination_path)\n\n            print(c(f'The file/folder: \"{file_name}\" was successfully added to the flash drive. Destination: \"{destination_path}\"', \"green\"))\n            self.open_flash_drive_in_finder()\n        except Exception as e:\n            print(c(f'An error occurred while trying to add the file/folder to the flash drive: {str(e)}', 'red'))\n\n\n    def delete_file_on_flash_drive(self) -> None:\n        \"\"\"\n        Deletes a file or folder from the flash drive.\n        \"\"\"\n\n        while True:\n            self.open_flash_drive_in_finder()\n\n            all_files = self._get_files_recursive(self.flash_drive_path)\n            \n            if not all_files:\n                print(c(\"\\nThere are currently no files or folders on your Flash Drive.\", \"red\"))\n                return\n\n            file_path = input(\"Please enter the path of the file/folder you want to delete (or 'q' to quit): \")\n\n            if file_path.lower().strip() == 'q':\n                print(c(\"Operation cancelled.\", \"red\"))\n                time.sleep(1)\n                os.system('clear')\n                print_menu()\n                return\n\n            file_name = os.path.basename(file_path)\n            destination_file = os.path.join(self.flash_drive_path, file_name)\n\n            if os.path.exists(destination_file):\n                confirm = input(f\"Are you sure you want to delete \\\"{file_path}\\\" from your flash drive? (yes/y): \")\n\n                if confirm.lower().strip() in [\"yes\", \"y\"]:\n                    try:\n                        if os.path.isdir(destination_file):\n                            shutil.rmtree(destination_file)\n                        else:\n                            os.remove(destination_file)\n                        print(c(f'The file/folder: \"{file_path}\" was successfully removed from the flash drive!', 'green'))\n                    except Exception as e:\n                        print(f'Error occurred while trying to remove the file/folder from the flash drive: {str(e)}')\n                else:\n                    print(f'The file/folder: \"{file_path}\" will {c(\"NOT\", \"red\")} be deleted. Please enter a new path.')\n\n            else:\n                print(c(f\"Can't delete the file/folder: \\\"{file_path}\\\". Does not exist on flash drive.\", 'red'))\n\n\n    def unmount_drive(self) -> None:\n        \"\"\"\n        Unmounts the flash drive from the computer without full on \n        ejecting it. \n        \"\"\"\n\n        try:\n            command = ['diskutil', 'unmountDisk', self.flash_drive_identifier]\n            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n            \n            if result.stderr.strip():\n                print(c(result.stderr.strip(), 'red'))\n            else:\n                print(c(f\"Flash drive at '{self.flash_drive_identifier}' has been successfully unmounted!\\n\", 'green'))\n\n        except Exception as e:\n            print(c(f'Error occurred while unmounting the flash drive: {str(e)}', 'red'))\n\n    def remount_drive(self):\n        \"\"\"\n        Remounts the flash drive. Prints an error\n        if process can't be completed.\n        \"\"\"\n\n        try:\n            command = ['diskutil', 'mountDisk', self.flash_drive_identifier]\n            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n            \n            if result.stderr.strip():\n                print(c(result.stderr.strip(), 'red'))\n                print(c(\"Make sure you've physically removed your flash drive after the last ejection.\\n\", 'red'))\n                exit(0)\n            else:\n                print(c(f\"Flash drive at '{self.flash_drive_identifier}' has been successfully remounted!\\n\", 'green'))\n        except Exception as e:\n            print(c(f'Error occurred while remounting the flash drive: {str(e)}', 'red'))\n\n    def eject_drive(self) -> None:\n        \"\"\"\n        Ejects the flash drive from the computer.\n        \"\"\"\n\n        try:\n            command = ['diskutil', 'eject', self.flash_drive_identifier]\n            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n            \n            if result.stderr.strip():\n                print(c(result.stderr.strip(), 'red'))\n                print(c(\"Make sure to connect and mount your Flash Drive.\\n\", \"red\"))\n                exit(0)\n            else:\n                print(c(f\"Flash drive at '{self.flash_drive_identifier}' has been successfully ejected!\", 'green'))\n                print(c(\"Physically remove the flash drive from your computer to eject it completely.\\n\", 'blue'))\n                exit(0)\n\n        except Exception as e:\n            print(c(f'Error occurred while ejecting the flash drive: {str(e)}', 'red'))\n            exit(0)\n\n    def get_all_files(self) -> [str]:\n        \"\"\"\n        Gets all files from the drive and returns them as a string list. Doesn't include \n        hidden files.\n        \"\"\"\n        try:\n            if not os.path.exists(self.flash_drive_path):\n                print(c(\"The specified flash drive path does not exist.\\n\", \"red\"))\n                exit(0)\n\n            all_files = self._get_files_recursive(self.flash_drive_path)\n\n            if all_files:\n                print(\"\\nThese are all the Files on your Flash Drive:\")\n                for file in all_files:\n                    print(file)\n            else:\n                print(c(\"\\nThere are currently no files on your Flash Drive.\", \"red\"))\n                \n        except Exception as e:\n            print(f'Error occurred while getting files from the flash drive: {str(e)}')\n\n\n    def _get_files_recursive(self, path, level=0):\n        \"\"\"\n        Helper function to recursively get files and folders.\n        \"\"\"\n        items = []\n        try:\n            for entry in os.listdir(path):\n                if not entry.startswith('.'):\n                    full_path = os.path.join(path, entry)\n                    indent = '    ' * level\n\n                    if os.path.isdir(full_path):\n                        items.append(f\"{indent}{entry}\")\n                        items.extend(self._get_files_recursive(full_path, level + 1))\n                    else:\n                        items.append(f\"{indent}- {entry}\")\n\n        except Exception as e:\n            print(f'Error occurred while accessing the path {path}: {str(e)}')\n\n        return items\n    \n    def copy_file_to_new_location(self, old_file_name, new_path):\n        \"\"\"\n        Copys a file from the flash drive to a new location\n        :param old_file_name: The name of the file on the flash to be copied.\n        :param new_path: The new path the file will be copied to.\n        \"\"\"\n        fd_file_path = f\"{self.flash_drive_path}/{old_file_name}\"\n        os.system(f\"cp {fd_file_path} {new_path}\")\n\n    def explain_unmount_and_eject(self):\n        print(\"\\nDefinitions\")\n        print(f\"{c('Unmount', 'blue')}: Temporarily disconnect the Flash Drive logically, but not physically. Do this if you plan to reconnect Flash Drive without physically removing it first.\")\n        print(f\"{c('Eject', 'blue')}: Logically and Physically remove the Flash Drive\\n\") \n        \n        understood = input(\"Understood? (y/yes): \")\n\n        if understood.lower().strip() in [\"yes\", \"y\"]:\n            print(c(\"Great!\", \"green\"))\n            time.sleep(1)\n            os.system('clear')\n            print_menu()\n            return\n\ndef print_menu():\n    print(\"Flash Drive Options\")\n    print(\"1. Open flash drive contents in Finder \")\n    print(\"2. Add files/folders to your flash drive\")\n    print(\"3. Delete files from your flash drive\")\n    print(\"4. Unmount your flash drive\")\n    print(\"5. Remount your flash drive\")\n    print(\"6. Eject flash drive from your computer \")\n    print(\"7. Displays all the files from your flash drive\")\n    print(\"8. Explains unmounting vs ejecting a Flash Drive\\n\")\n\n\ndef choose_option(flash_drive, choice: int):\n    match choice:\n        case 1:\n            flash_drive.open_flash_drive_in_finder()\n        case 2:\n            flash_drive.add_file_to_flash_drive()\n        case 3:\n            flash_drive.delete_file_on_flash_drive()\n        case 4:\n            flash_drive.unmount_drive()\n        case 5:\n            flash_drive.remount_drive()\n        case 6:\n            flash_drive.eject_drive()\n        case 7:\n            flash_drive.get_all_files()\n        case 8:\n            flash_drive.explain_unmount_and_eject()\n        case _:\n            print(c(\"Invalid number\", \"red\"))\n\n\ndef get_flash_drive():\n\n    with open(\"data.json\", \"r\") as file:\n        content = json.load(file)\n        \n    name = content['Name']\n    identifier = content[\"Identifier\"]\n\n    return FlashDrive(name, identifier)\n\n\ndef prompt_user(flash_drive):\n    while True:\n        user_input = input(\"Choose an option 1-8 (or 'q' to quit): \")\n        \n        if user_input.lower() == 'q':\n            print(c(\"Program quite successfully\", \"green\"))\n            flash_drive.eject_drive()\n            break\n        \n        try:\n            user_number = int(user_input)\n            if 1 <= user_number <= 8:\n                choose_option(flash_drive, user_number)\n            else:\n                print(c(\"Invalid input. Please enter an integer between 1 and 8.\", \"red\"))\n        except ValueError:\n            print(c(\"Invalid input. Please enter an integer between 1 and 8.\", \"red\"))\n\n\ndef main():\n\n    flash_drive = get_flash_drive()\n\n    print_menu()\n    prompt_user(flash_drive)\n\nmain()"
            }
        },
        {
            "id": 8,
            "instruction": "Open and terminal and run the following commands to interact with your flash drive.",
            "Code": {
                "Name": "",
                "Description": "",
                "Language": "Command",
                "FormatCode": "cd FlashDrive\npython3 flash_drive.py",
                "CopyCode": "cd FlashDrive\npython3 flash_drive.py"
            }
        }
    ]
}

