{
    "FormatCode": "import Foundation\nimport FirebaseAuth\n\nstruct AuthDataResultModel {\n    let uid: String\n    let email: String?\n    let photoUrl: String?\n    \n    init(user: User) {\n        self.uid = user.uid\n        self.email = user.email\n        self.photoUrl = user.photoURL?.absoluteString\n    }\n}\n\nfinal class AuthenticationManager {\n    \n    static let shared = AuthenticationManager()\n    \n    private init() { }\n    \n    func getAuthenticatedUser() throws -> AuthDataResultModel {\n        guard let user = Auth.auth().currentUser else {\n            throw URLError(.badServerResponse)\n        }\n        \n        return AuthDataResultModel(user: user)\n    }\n    \n    @discardableResult\n    func createUser(email: String, password: String) async throws -> AuthDataResultModel {\n        let authDataResult = try await Auth.auth().createUser(withEmail: email, password: password)\n        return AuthDataResultModel(user: authDataResult.user)\n    }\n    \n    @discardableResult\n    func signInUser(email: String, password: String) async throws -> AuthDataResultModel {\n        let authDataResult = try await Auth.auth().signIn(withEmail: email, password: password)\n        return AuthDataResultModel(user: authDataResult.user)\n    }\n    \n    func resetPassword(email: String) async throws {\n        // User must exist for the email to be sent\n        try await Auth.auth().sendPasswordReset(withEmail: email)\n    }\n    \n    func updateEmail(email: String) async throws {\n        guard let user = Auth.auth().currentUser else {\n             throw URLError(.badServerResponse)\n        }\n\n        // Sends an email to the new email address. After you've verified in you're\n        // new email address, a confirmation about the change will be sent to your\n        // old email address. You can see the email change in your firebase users table.\n        // Has to be an email that's not already in use and different from your current one.\n        // It might take a second to send/you might need to log out first, then sign back in.\n        \n        try await user.sendEmailVerification(beforeUpdatingEmail: email)\n        \n        print(\"HERE \\(user.isEmailVerified)\")\n    }\n    \n    func signOut() throws {\n        try Auth.auth().signOut()\n    }\n}",
    "CopyCode": "import Foundation\nimport FirebaseAuth\n\nstruct AuthDataResultModel {\n    let uid: String\n    let email: String?\n    let photoUrl: String?\n    \n    init(user: User) {\n        self.uid = user.uid\n        self.email = user.email\n        self.photoUrl = user.photoURL?.absoluteString\n    }\n}\n\nfinal class AuthenticationManager {\n    \n    static let shared = AuthenticationManager()\n    \n    private init() { }\n    \n    func getAuthenticatedUser() throws -> AuthDataResultModel {\n        guard let user = Auth.auth().currentUser else {\n            throw URLError(.badServerResponse)\n        }\n        \n        return AuthDataResultModel(user: user)\n    }\n    \n    @discardableResult\n    func createUser(email: String, password: String) async throws -> AuthDataResultModel {\n        let authDataResult = try await Auth.auth().createUser(withEmail: email, password: password)\n        return AuthDataResultModel(user: authDataResult.user)\n    }\n    \n    @discardableResult\n    func signInUser(email: String, password: String) async throws -> AuthDataResultModel {\n        let authDataResult = try await Auth.auth().signIn(withEmail: email, password: password)\n        return AuthDataResultModel(user: authDataResult.user)\n    }\n    \n    func resetPassword(email: String) async throws {\n        // User must exist for the email to be sent\n        try await Auth.auth().sendPasswordReset(withEmail: email)\n    }\n    \n    func updateEmail(email: String) async throws {\n        guard let user = Auth.auth().currentUser else {\n             throw URLError(.badServerResponse)\n        }\n\n        // Sends an email to the new email address. After you've verified in you're\n        // new email address, a confirmation about the change will be sent to your\n        // old email address. You can see the email change in your firebase users table.\n        // Has to be an email that's not already in use and different from your current one.\n        // It might take a second to send/you might need to log out first, then sign back in.\n        \n        try await user.sendEmailVerification(beforeUpdatingEmail: email)\n        \n        print(\"HERE \\(user.isEmailVerified)\")\n    }\n    \n    func signOut() throws {\n        try Auth.auth().signOut()\n    }\n}"
}


