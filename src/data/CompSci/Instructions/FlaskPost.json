{
    "MultiSet": [
        {
            "Info": [
                {
                    "title": "How to Make a Complex Rest API using Vue, Flask and PostgreSQL",
                    "desc": "Explains the process of setting up a Vue frontend with a Flask Rest API backend.",
                    "ref": "flask-PostgreSQL"
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "We'll build a full-stack web application step-by-step using Vue, Python, Flask, and Postgres."
                },
                {
                    "id": 2,
                    "instruction": "A full video demo of this app can be found on my YouTube channel [here](https://youtu.be/6Qz0yUrn_J0?si=fDoMIQJorSYHasS7)."
                },
                {
                    "id": 3,
                    "instruction": "Let's get started!"
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Technologies We'll Use",
                    "desc": "This is the techstack we'll use to make this project"
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "<u><b>Vue</u></b> - The JavaScript Framework we'll use to build our user interface."
                },
                {
                    "id": 2,
                    "instruction": "<u><b>JavaScript</u></b> - The scripting language we'll use to add logic to our frontend."
                },
                {
                    "id": 3,
                    "instruction": "<u><b>Flask</u></b> - The Python web framework we'll use to help build our Rest Api."
                },
                {
                    "id": 4,
                    "instruction": "<u><b>Python</u></b> - The programming language we'll use to develop our Rest Api."
                },
                {
                    "id": 5,
                    "instruction": "<u><b>SQL</u></b> - The language we'll use to help build and query our database."
                },
                {
                    "id": 6,
                    "instruction": "<u><b>PostgreSQL</u></b> - The database we'll use to store user information."
                },
                {
                    "id": 7,
                    "instruction": "<u><b>Visual Studio Code</u></b> - The code editor we'll use to help us build our project."
                },
                {
                    "id": 8,
                    "instruction": "<u><b>PyTest</u></b> - The Python testing framework we'll use to test our Rest Api."
                },
                {
                    "id": 9,
                    "instruction": "<u><b>Jest</u></b> - The JavaScript testing framework we'll use to test our Vue code."
                },
                {
                    "id": 10,
                    "instruction": "<u><b>Github</u></b> - The platform we'll use for version control and collaborative software development."
                },
                {
                    "id": 11,
                    "instruction": "<u><b>Git</u></b> - The distributed version control system we'll use to track changes to our projects."
                },
                {
                    "id": 10,
                    "instruction": "<u><b>Homebrew</u></b> - MacOS package manager we'll use to install software. Optional to use."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Setup Technologies",
                    "desc": "Explanation of how to setup and verify all technologies."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Verify you have visual studio Code installed by running the following command in a terminal. If it outputs a version number you should have it installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "code --version",
                        "CopyCode": "code --version"
                    }
                },
                {
                    "id": 2,
                    "instruction": "If you haven't already download Visual Studio Code [Here](https://code.visualstudio.com/download). Download the version that matches your operating system."
                },
                {
                    "id": 3,
                    "instruction": "Verify that you have Homebrew installed on your computer by running this command in your terminal. If it outputs a version you should have it installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew --version",
                        "CopyCode": "brew --version"
                    }
                },
                {
                    "id": 4,
                    "instruction": "If you don't already have homebrew installed, install it using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"",
                        "CopyCode": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
                    }
                },
                {
                    "id": 5,
                    "instruction": "Verify that you have node and npm installed by running the following commands. If they output a version you should be good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "node -v\nnpm -v",
                        "CopyCode": "node -v\nnpm -v"
                    }
                },
                {
                    "id": 6,
                    "instruction": "If node and npm didn't output a version, download them using homebrew. It's just one command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew install node",
                        "CopyCode": "brew install node"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Verify that you have Python3 installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "python3 --version",
                        "CopyCode": "python3 --version"
                    }
                },
                {
                    "id": 8,
                    "instruction": "If you don't have Python3 installed, download it [here](https://www.python.org/downloads/)"
                },
                {
                    "id": 9,
                    "instruction": "Install the following Python libraries",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "pip3 install flask\npip3 install pytest",
                        "CopyCode": "pip3 install flask\npip3 install pytest"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Verify you have the Python packages installed by running the following commands. If it doesn't produce a \"WARNING: Package(s) not found\" error, you should be good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "pip3 show flask\npip3 show pytest",
                        "CopyCode": "pip3 show flask\npip3 show pytest"
                    }
                },
                {
                    "id": 11,
                    "instruction": "We'll setup the Jest testing framework later in our project. It's just installed using npm."
                },
                {
                    "id": 12,
                    "instruction": "Go to [github.com](https://github.com/) to see if you have an account. If you don't press the \"Sign Up\" button in the top-right and follow the prompts."
                },
                {
                    "id": 13,
                    "instruction": "Verify that git is installed by running the following command in a terminal. If it outputs a version you're good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git --version",
                        "CopyCode": "git --version"
                    }
                },
                {
                    "id": 14,
                    "instruction": "If you don't have git setup follow this instruction set (here)[/CompSci/GitHub#createGHAccount]."
                },
                {
                    "id": 15,
                    "instruction": "Verify that you have PostgreSQL installed by running the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql --version",
                        "CopyCode": "psql --version"
                    }
                },
                {
                    "id": 16,
                    "instruction": "If the command in step 17 didn't output the version, see the next steps titled \"How to Install PostgreSQL\". Follow the instruction set that corresponds to your operating system."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "How to Install PostgreSQL",
                    "desc": "Explains how to install PostgreSQL on MacOS."
                }
            ],
            "Instructions": [
                {
                    "id": 18,
                    "instruction": "Go [here](https://www.postgresql.org/download/) to see the instructions for how to download PostgreSQL. Press on the card that has the logo of your operating system. For mac you would just install it using the following commands. Make sure to upgrade brew first.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew install pkg-config\nbrew upgrade gh\nbrew upgrade\nbrew install postgresql@15",
                        "CopyCode": "brew install pkg-config\nbrew upgrade gh\nbrew upgrade\nbrew install postgresql@15"
                    }
                },
                {
                    "id": 19,
                    "instruction": "If you get an error that says \"error: externally-managed-environment\" when you try to run pip3 after upgrading brew, I'd honestly just recommend downloading the latest version of python [here](https://www.python.org/downloads/). Ignore the suggested fixes."
                },
                {
                    "id": 20,
                    "instruction": "Add PostgreSQL to your PATH",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "echo 'export PATH=\"/usr/local/opt/postgresql@15/bin:$PATH\"' >> ~/.zshrc\nsource ~/.zshrc",
                        "CopyCode": "echo 'export PATH=\"/usr/local/opt/postgresql@15/bin:$PATH\"' >> ~/.zshrc\nsource ~/.zshrc"
                    }
                },
                {
                    "id": 21,
                    "instruction": "Verify that you have PostgreSQL installed by running the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql --version",
                        "CopyCode": "psql --version"
                    }
                },
                {
                    "id": 22,
                    "instruction": "If step 21 didn't work your path might be wrong. Run the following command and look for the echo command in the output.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew reinstall postgresql@15",
                        "CopyCode": "brew reinstall postgresql@15"
                    }
                },
                {
                    "id": 23,
                    "instruction": "If step 21 didn't work, open your ~/.zshrc file by running the following command and then delete the old path. Then press control + o, return/enter, control + x to save your changes",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "nano ~/.zshrc",
                        "CopyCode": "nano ~/.zshrc"
                    }
                },
                {
                    "id": 24,
                    "instruction": "If step 21 didn't work, run the following command to source your file. Then check that psql is installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "source ~/.zshrc\npsql --version",
                        "CopyCode": "source ~/.zshrc\npsql --version"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Design Your Database Schema",
                    "desc": "The first thing we'll do is design our database ER and Schema diagrams."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "We'll be creating a notes app. We'll have users that each have their own set of notes. Each note will have it's individual attributes."
                },
                {
                    "id": 2,
                    "instruction": "To design our diagrams we'll use [erdplus.com](https://erdplus.com/). We used this tool in CSC 455 (now CSC 355) so you should be able to login using your UNCW credentials. Go to the \"Documents\" tab to create your diagram."
                },
                {
                    "id": 3,
                    "instruction": "This will be our &Schema Diagram&(/download/NotesSchema.png). Go to the \"Documents\" tab to create your diagram. Then name your diagram and select \"Relational Schema\". When you finished press \"Menu\" in the top-left. Select \"High Resolution (4x normal size)\" and then press Save. NOTE: I'm not 100% sure if this diagram is completely accurate."
                },
                {
                    "id": 4,
                    "instruction": "This will be our &ER Diagram&(/download/NotesSchema.png). Go to the \"Documents\" tab to create your diagram. Then name your diagram and select \"ER Diagram\". When you finished press \"Menu\" in the top-left. Select \"High Resolution (4x normal size)\" and then press Save. NOTE: I'm not 100% sure if this diagram is completely accurate."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Setup PostgreSQL Database",
                    "desc": "We'll Setup our PostgreSQL database for our project on MacOS."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Each user in your group will have to setup PostgreSQL on their own computer."
                },
                {
                    "id": 2,
                    "instruction": "Make sure every user has Postgres installed using the following command to confirm it's installed. If they don't have it installed, follow instructions in the \"How to Install PostgreSQL\" section",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql --version",
                        "CopyCode": "psql --version"
                    }
                },
                {
                    "id": 3,
                    "instruction": "Now you'll start your Postgres server. First list your brew services. If the status of Postgres is \"None\" than means your server is NOT running. Copy and record the name of your postgresql database. Mine was \"postgresql@15\".",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew services list",
                        "CopyCode": "brew services list"
                    }
                },
                {
                    "id": 4,
                    "instruction": "If your server isn't running, start it using the following command. Replace \"postgresql@15\" with the name from the previous command if it's different.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew services start postgresql@15",
                        "CopyCode": "brew services start postgresql@15"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Initialize the database cluster using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "initdb /usr/local/var/postgres",
                        "CopyCode": "initdb /usr/local/var/postgres"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Run the following command to confirm your cluster started. If the \"status\" says running you should be good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew services list",
                        "CopyCode": "brew services list"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Login as superuser. You don't have to change any part of the command. The \"whoami\" variable is probably your computers username.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql -U $(whoami) -d postgres",
                        "CopyCode": "psql -U $(whoami) -d postgres"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Run the following command to see your username.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "SELECT current_user;",
                        "CopyCode": "SELECT current_user;"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Run the following command to your list of roles and permissions. Press 'q' to exit.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\du",
                        "CopyCode": "\\du"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Create your databases. There will be a production database and a test database. Press 'q' to exit.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE DATABASE notesapp_db;\nCREATE DATABASE notesapp_test_db;",
                        "CopyCode": "CREATE DATABASE notesapp_db;\nCREATE DATABASE notesapp_test_db;"
                    }
                },
                {
                    "id": 11,
                    "instruction": "List your current databases. You should see \"notesapp_db\" and \"notesapp_test_db\" in the table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\l",
                        "CopyCode": "\\l"
                    }
                },
                {
                    "id": 12,
                    "instruction": "Now create your users. You will have a super user named \"postgres\" and a regular user and test user. You can change the usernames and passwords as you wish.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE ROLE postgres WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_super_password_123';\nCREATE ROLE notes_app_user WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_team_user_123';\nCREATE ROLE notes_app_test_user WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_test_user1';",
                        "CopyCode": "CREATE ROLE postgres WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_super_password_123';\nCREATE ROLE notes_app_user WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_team_user_123';\nCREATE ROLE notes_app_test_user WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_test_user1';"
                    }
                },
                {
                    "id": 13,
                    "instruction": "Now run the following command. You should see your new user in your database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\du",
                        "CopyCode": "\\du"
                    }
                },
                {
                    "id": 14,
                    "instruction": "Now exit your Postgres session.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "exit",
                        "CopyCode": "exit"
                    }
                },
                {
                    "id": 15,
                    "instruction": "Sign back in using the \"postgres\" superuser. Press \"command + k\" to clear the terminal output from your previous session.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql -U postgres",
                        "CopyCode": "psql -U postgres"
                    }
                },
                {
                    "id": 16,
                    "instruction": "Connect to the \"notesapp_db\" database using your regular user.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\c notesapp_db notes_app_user",
                        "CopyCode": "\\c notesapp_db notes_app_user"
                    }
                },
                {
                    "id": 17,
                    "instruction": "Create the \"Users\" table in your database. If it outputs \"CREATE TABLE\" that means it was successful.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE TABLE Users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);",
                        "CopyCode": "CREATE TABLE Users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);"
                    }
                },
                {
                    "id": 18,
                    "instruction": "Create the \"Notes\" table in your database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE TABLE Notes (\n    note_id SERIAL PRIMARY KEY,\n    title VARCHAR(200),\n    content TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    user_id INT REFERENCES Users(user_id) ON DELETE CASCADE\n);",
                        "CopyCode": "CREATE TABLE Notes (\n    note_id SERIAL PRIMARY KEY,\n    title VARCHAR(200),\n    content TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    user_id INT REFERENCES Users(user_id) ON DELETE CASCADE\n);"
                    }
                },
                {
                    "id": 19,
                    "instruction": "Create the \"Tags\" table in your database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE TABLE Tags (\n    tag_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) UNIQUE NOT NULL\n);",
                        "CopyCode": "CREATE TABLE Tags (\n    tag_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) UNIQUE NOT NULL\n);"
                    }
                },
                {
                    "id": 20,
                    "instruction": "Create the \"Note_Tags\" table in your database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE TABLE Note_Tags (\n    note_id INT REFERENCES Notes(note_id) ON DELETE CASCADE,\n    tag_id INT REFERENCES Tags(tag_id) ON DELETE CASCADE,\n    PRIMARY KEY (note_id, tag_id)\n);\n",
                        "CopyCode": "CREATE TABLE Note_Tags (\n    note_id INT REFERENCES Notes(note_id) ON DELETE CASCADE,\n    tag_id INT REFERENCES Tags(tag_id) ON DELETE CASCADE,\n    PRIMARY KEY (note_id, tag_id)\n);\n"
                    }
                },
                {
                    "id": 21,
                    "instruction": " Run the following. Make sure the 4 table names are displayed in the table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\dt",
                        "CopyCode": "\\dt"
                    }
                },
                {
                    "id": 22,
                    "instruction": "Run the following command to connect to your test database as your test user.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\c notesapp_test_db notes_app_test_user",
                        "CopyCode": "\\c notesapp_test_db notes_app_test_user"
                    }
                },
                {
                    "id": 23,
                    "instruction": "Run the 4 \"create table\" SQL commands from steps 14-17 in your test database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE TABLE Users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE Notes (\n    note_id SERIAL PRIMARY KEY,\n    title VARCHAR(200),\n    content TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    user_id INT REFERENCES Users(user_id) ON DELETE CASCADE\n);\n\nCREATE TABLE Tags (\n    tag_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE Note_Tags (\n    note_id INT REFERENCES Notes(note_id) ON DELETE CASCADE,\n    tag_id INT REFERENCES Tags(tag_id) ON DELETE CASCADE,\n    PRIMARY KEY (note_id, tag_id)\n);",
                        "CopyCode": "CREATE TABLE Users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE Notes (\n    note_id SERIAL PRIMARY KEY,\n    title VARCHAR(200),\n    content TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    user_id INT REFERENCES Users(user_id) ON DELETE CASCADE\n);\n\nCREATE TABLE Tags (\n    tag_id SERIAL PRIMARY KEY,\n    name VARCHAR(50) UNIQUE NOT NULL\n);\n\nCREATE TABLE Note_Tags (\n    note_id INT REFERENCES Notes(note_id) ON DELETE CASCADE,\n    tag_id INT REFERENCES Tags(tag_id) ON DELETE CASCADE,\n    PRIMARY KEY (note_id, tag_id)\n);"
                    }
                },
                {
                    "id": 24,
                    "instruction": "Run the following. Ensure the 4 table names are displayed in the table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\dt",
                        "CopyCode": "\\dt"
                    }
                },
                {
                    "id": 25,
                    "instruction": "Now just add a little bit of test data to your database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "INSERT INTO Users (username, email, password_hash)\nVALUES ('john_doe', 'john.doe@example.com', 'hashed_password_1');",
                        "CopyCode": "INSERT INTO Users (username, email, password_hash)\nVALUES ('john_doe', 'john.doe@example.com', 'hashed_password_1');"
                    }
                },
                {
                    "id": 26,
                    "instruction": "Exit the psql shell entirely.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\q",
                        "CopyCode": "\\q"
                    }
                },
                {
                    "id": 27,
                    "instruction": "Now test that your URI is working. This isn't a command but this is what it should look like.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Link",
                        "FormatCode": "postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_test_db",
                        "CopyCode": "postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_test_db"
                    }
                },
                {
                    "id": 28,
                    "instruction": "Now run the following command in your terminal to test your endpoint.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_db -c \"SELECT * FROM Users;\"",
                        "CopyCode": "psql postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_db -c \"SELECT * FROM Users;\""
                    }
                },
                {
                    "id": 29,
                    "instruction": "Now ping your test database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql postgresql://notes_app_test_user:notes_test_user1@localhost/notesapp_test_db -c \"SELECT * FROM Users;\"",
                        "CopyCode": "psql postgresql://notes_app_test_user:notes_test_user1@localhost/notesapp_test_db -c \"SELECT * FROM Users;\""
                    }
                },
                {
                    "id": 30,
                    "instruction": "Again make sure every member of your group does this instruction set."
                },
                {
                    "id": 31,
                    "instruction": "To recap, this is how you sign into your database",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql -U postgres",
                        "CopyCode": "psql -U postgres"
                    }
                },
                {
                    "id": 32,
                    "instruction": "This is how you sign into your regular database",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\c notesapp_db notes_app_user",
                        "CopyCode": "\\c notesapp_db notes_app_user"
                    }
                },
                {
                    "id": 33,
                    "instruction": "This is how you sign into your test database",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\c notesapp_test_db notes_app_test_user",
                        "CopyCode": "\\c notesapp_test_db notes_app_test_user"
                    }
                },
                {
                    "id": 34,
                    "instruction": "See all values in a table. Remember the colon at the end.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "SELECT * FROM Users;",
                        "CopyCode": "SELECT * FROM Users;"
                    }
                },
                {
                    "id": 35,
                    "instruction": "These are commonly used PostgreSQL commands.",
                    "Table": [
                        {
                            "Command": "\\dt",
                            "Description": "List all tables",
                            "Example": "\\dt"
                        },
                        {
                            "Command": "\\q",
                            "Description": "Quit/exit your database",
                            "Example": "\\q"
                        },
                        {
                            "Command": "\\du",
                            "Description": "list all users and roles",
                            "Example": "\\du"
                        },
                        {
                            "Command": "\\l",
                            "Description": "list all your databases",
                            "Example": "\\l"
                        }
                    ]
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Setup your Git Repositories",
                    "desc": "Setup Your GitHub Repositories"
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "First make sure everyone in your group has a git setup on their computer. Also make sure everyone has a GitHub account.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git --version",
                        "CopyCode": "git --version"
                    }
                },
                {
                    "id": 2,
                    "instruction": "If you don't have GitHub setup, go (here)[/CompSci/GitHub#createGHAccount] for instructions."
                },
                {
                    "id": 3,
                    "instruction": "Go to [github.com](https://github.com/) and sign in. Then click on the green \"New\" button. In the \"Create a new repository\" form enter the following values.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Values",
                        "FormatCode": "Repository name: Notes-Rest-Api\nDescription: Notes-Rest-Api using Flask and Postgres.\n\n* Do NOT check \\\"Add a README file\\\" *\n\n* Press the green \\\"Create repository\\\" button *\n",
                        "CopyCode": "Repository name: Notes-Rest-Api\nDescription: Notes-Rest-Api using Flask and Postgres.\n\n* Do NOT check \\\"Add a README file\\\" *\n\n* Press the green \\\"Create repository\\\" button *\n"
                    }
                },
                {
                    "id": 4,
                    "instruction": "You should be taken to a new page. In the \"Quick setup — if you've done this kind of thing before\" section you should see the https link. Copy and record this link. Then go to your terminal and run the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git clone YOUR-HTTPS-LINK",
                        "CopyCode": "git clone YOUR-HTTPS-LINK"
                    }
                },
                {
                    "id": 5,
                    "instruction": "After you've done that go back to [github.com](https://github.com/). Click the green \"New\" button. In the \"Create a new repository\" form enter the following values.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Values",
                        "FormatCode": "Repository name: Notes-Frontend\nDescription: Notes app frontend that uses vue.\n\n* Do NOT check \\\"Add a README file\\\" *\n\n* Press the green \\\"Create repository\\\" button *",
                        "CopyCode": "Repository name: Notes-Frontend\nDescription: Notes app frontend that uses vue.\n\n* Do NOT check \\\"Add a README file\\\" *\n\n* Press the green \\\"Create repository\\\" button *"
                    }
                },
                {
                    "id": 6,
                    "instruction": "You should be taken to a new page. In the \"Quick setup — if you've done this kind of thing before\" section you should see the https link. Copy and record this link. Then go to your terminal and run the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git clone YOUR-HTTPS-LINK",
                        "CopyCode": "git clone YOUR-HTTPS-LINK"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Now just add a readme file to both folders and push your changes as a test.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Rest-Api\ntouch README.md\ngit add .\ngit commit -m \"Added Readme\"\ngit push",
                        "CopyCode": "cd Notes-Rest-Api\ntouch README.md\ngit add .\ngit commit -m \"Added Readme\"\ngit push"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Now do the same for the frontend folder.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Frontend\ntouch README.md\ngit add .\ngit commit -m \"Added Readme\"\ngit push",
                        "CopyCode": "cd Notes-Frontend\ntouch README.md\ngit add .\ngit commit -m \"Added Readme\"\ngit push"
                    }
                },
                {
                    "id": 9,
                    "instruction": "If steps 7 and 8 worked, you should be good."
                },
                {
                    "id": 10,
                    "instruction": "Now go back to [github.com](https://github.com/) and open your \"Notes-Rest-Api\" repository. You're going to add your team-members as collaborators."
                },
                {
                    "id": 11,
                    "instruction": "Click on the \"Settings\" tab on the right with the gear icon next to it."
                },
                {
                    "id": 12,
                    "instruction": "On the left-hand bar press on \"Collaborators\". Then press the green \"Add people\" tab. In the search bar look up the Github usernames of each of your team members. After you find them press the green \"Add *username* to this repository\"."
                },
                {
                    "id": 13,
                    "instruction": "After you send the invite tell your team members to check their email. Press the \"View invitation\" link in the email, then accept on GitHub."
                },
                {
                    "id": 14,
                    "instruction": "Add them for both your Rest api and frontend repositories."
                },
                {
                    "id": 15,
                    "instruction": "After that you should be good"
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Flask Rest API Folder Setup Explanation",
                    "desc": "Explains the purpose of the various folders and what code they should contain."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "<u><b>api/errors</u></b> - Where the custom exceptions for your project will be kept."
                },
                {
                    "id": 2,
                    "instruction": "<u><b>api/models</u></b> - Python classes that represent the objects in your database."
                },
                {
                    "id": 3,
                    "instruction": "<u><b>api/repositories</u></b> - All functions that will be used to query and \"talk to\" your database. These should just be your simple sql queries. Your business logic will be applied in the \"services\" folder."
                },
                {
                    "id": 4,
                    "instruction": "<u><b>api/routes</u></b> - Where your endpoints will be stored. All data returned from this Rest API will happen in this folder. The logic and functions you use to \"talk to\" your database should be in your \"services\" and \"repositories\" folder. Keep your endpoint functions short and clean."
                },
                {
                    "id": 5,
                    "instruction": "<u><b>api/schemas</u></b> - Serializes and deserializes JSON data using the python \"Marshmellow\" library. Basically it will take a JSON object response and convert it into a Python model object. It will also do the opposite and convert a Python model object into a JSON object."
                },
                {
                    "id": 6,
                    "instruction": "<u><b>api/services</u></b> - Functions that use your repository functions to create business logic in your application."
                },
                {
                    "id": 7,
                    "instruction": "<u><b>api/utils</u></b> - Common functions that are reused in various parts of your Rest API."
                },
                {
                    "id": 8,
                    "instruction": "<u><b>tests/db_testing</u></b> - Where you'll test your database connection."
                },
                {
                    "id": 9,
                    "instruction": "<u><b>tests/endpoint_testing</u></b> - Test your endpoints."
                },
                {
                    "id": 10,
                    "instruction": "<u><b>tests/services_testing</u></b> - Test your service functions."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Create your Flask Rest API",
                    "desc": "Explains how to create your Flask Rest API and connect it to your PostgreSQL database."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Change into your Notes-Rest-Api folder and create the following folders and files. The [Git Repository](https://github.com/MichaelT-W23/Notes-Rest-Api) for this code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Rest-Api\n\nmkdir api\nmkdir api/errors\nmkdir api/models\nmkdir api/repositories\nmkdir api/routes\nmkdir api/schemas\nmkdir api/services\nmkdir api/utils\n\nmkdir tests\nmkdir tests/db_testing\nmkdir tests/endpoint_testing\nmkdir tests/services_testing\n\ncd api\ntouch errors/custom_exceptions.py\ntouch models/db_models.py\ntouch repositories/note_repository.py\ntouch repositories/user_repository.py\ntouch routes/endpoints.py\ntouch schemas/user_schema.py\ntouch services/note_service.py\ntouch services/user_service.py\ntouch utils/note_verification.py\n\ncd ../tests\ntouch conftest.py\ntouch endpoint_testing/test_note_endpoints.py\ntouch endpoint_testing/test_user_endpoints.py\ntouch services_testing/test_services.py\ntouch db_testing/test_db_connection.py\n\ncd ..\ntouch .gitignore\ntouch app.py \ntouch db.py\ntouch config.py",
                        "CopyCode": "cd Notes-Rest-Api\n\nmkdir api\nmkdir api/errors\nmkdir api/models\nmkdir api/repositories\nmkdir api/routes\nmkdir api/schemas\nmkdir api/services\nmkdir api/utils\n\nmkdir tests\nmkdir tests/db_testing\nmkdir tests/endpoint_testing\nmkdir tests/services_testing\n\ncd api\ntouch errors/custom_exceptions.py\ntouch models/db_models.py\ntouch repositories/note_repository.py\ntouch repositories/user_repository.py\ntouch routes/endpoints.py\ntouch schemas/user_schema.py\ntouch services/note_service.py\ntouch services/user_service.py\ntouch utils/note_verification.py\n\ncd ../tests\ntouch conftest.py\ntouch endpoint_testing/test_note_endpoints.py\ntouch endpoint_testing/test_user_endpoints.py\ntouch services_testing/test_services.py\ntouch db_testing/test_db_connection.py\n\ncd ..\ntouch .gitignore\ntouch app.py \ntouch db.py\ntouch config.py"
                    }
                },
                {
                    "id": 2,
                    "instruction": "Push your folder structure to GitHub.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git add .\ngit commit -m \"Setup Structure\"\ngit push",
                        "CopyCode": "git add .\ngit commit -m \"Setup Structure\"\ngit push"
                    }
                },
                {
                    "id": 3,
                    "instruction": "Now create a .env file in your folder.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Rest-Api\ntouch .env",
                        "CopyCode": "cd Notes-Rest-Api\ntouch .env"
                    }
                },
                {
                    "id": 4,
                    "instruction": "If you initially created a .env file in your first commit, run the following commands so that git won't track it. If you didn't commit a .env file in your first commit, ignore this step.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git rm .env --cached\ngit commit -m \"Stopped tracking .env File\"\ngit push",
                        "CopyCode": "git rm .env --cached\ngit commit -m \"Stopped tracking .env File\"\ngit push"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Open the \".gitignore\" file in the top-most directory. Paste in the following values.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": ".gitignore values",
                        "FormatCode": ".env",
                        "CopyCode": ".env"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Now open the \".env\" file. Paste in the following values.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "fxml",
                        "DisplayLang": "Env",
                        "FormatCode": "FLASK_ENV=development\n\nDEV_DATABASE_URI=postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_db\n\nTEST_DATABASE_URI=postgresql://notes_app_test_user:notes_test_user1@localhost/notesapp_test_db\n\nPROD_DATABASE_URI=SETUP_THIS_UP_LATER",
                        "CopyCode": "FLASK_ENV=development\n\nDEV_DATABASE_URI=postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_db\n\nTEST_DATABASE_URI=postgresql://notes_app_test_user:notes_test_user1@localhost/notesapp_test_db\n\nPROD_DATABASE_URI=SETUP_THIS_UP_LATER"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Create and start a virtualenv.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Rest-Api\npip3 install virtualenv\nvirtualenv venv\nsource venv/bin/activate",
                        "CopyCode": "cd Notes-Rest-Api\npip3 install virtualenv\nvirtualenv venv\nsource venv/bin/activate"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Install the necessary libraries. Make sure you've activated your venv in the last step.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "pip3 install Flask\npip3 install Flask-SQLAlchemy\npip3 install Flask-CORS\npip3 install python-dotenv\npip3 install marshmallow\npip3 install marshmallow-sqlalchemy\npip3 install psycopg2\npip3 install psycopg2-binary\npip3 install werkzeug\npip3 install pytest \npip3 install pytest-flask\npip3 install pytest-order\n",
                        "CopyCode": "pip3 install Flask\npip3 install Flask-SQLAlchemy\npip3 install Flask-CORS\npip3 install python-dotenv\npip3 install marshmallow\npip3 install marshmallow-sqlalchemy\npip3 install psycopg2\npip3 install psycopg2-binary\npip3 install werkzeug\npip3 install pytest \npip3 install pytest-flask\npip3 install pytest-order\n"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Go to your \"app.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "import os\nfrom flask import Flask\nfrom flask_cors import CORS\nfrom api.routes.endpoints import routes_blueprint\nfrom db import db, init_app\n\ndef create_app(config=None):\n    app = Flask(__name__)\n\n    if config is None:\n        config = os.getenv(\"FLASK_ENV\")\n\n    if config == \"development\":\n        app.config.from_object(\"config.DevelopmentConfig\")\n    elif config == \"testing\":\n        app.config.from_object(\"config.TestingConfig\")\n    else:\n        app.config.from_object(\"config.ProductionConfig\")\n\n    CORS(app, resources={r'/*': {'origins': '*'}})\n\n    db.init_app(app)\n\n    app.register_blueprint(routes_blueprint)\n    return app\n\n\nif __name__ == '__main__':\n    app = create_app()\n    app.run()",
                        "CopyCode": "import os\nfrom flask import Flask\nfrom flask_cors import CORS\nfrom api.routes.endpoints import routes_blueprint\nfrom db import db, init_app\n\ndef create_app(config=None):\n    app = Flask(__name__)\n\n    if config is None:\n        config = os.getenv(\"FLASK_ENV\")\n\n    if config == \"development\":\n        app.config.from_object(\"config.DevelopmentConfig\")\n    elif config == \"testing\":\n        app.config.from_object(\"config.TestingConfig\")\n    else:\n        app.config.from_object(\"config.ProductionConfig\")\n\n    CORS(app, resources={r'/*': {'origins': '*'}})\n\n    db.init_app(app)\n\n    app.register_blueprint(routes_blueprint)\n    return app\n\n\nif __name__ == '__main__':\n    app = create_app()\n    app.run()"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Go to your \"config.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "import os\n\nclass Config(object):\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    DEBUG = False\n\n\nclass DevelopmentConfig(Config):\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.getenv('DEV_DATABASE_URI')\n\n\nclass TestingConfig(Config):\n    DEBUG = True\n    TESTING = True\n\n    SQLALCHEMY_DATABASE_URI = os.getenv('TEST_DATABASE_URI')\n    PRESERVE_CONTEXT_ON_EXCEPTION = False\n\n\nclass ProductionConfig(Config):\n    DEBUG = False\n    SQLALCHEMY_DATABASE_URI = os.getenv('PROD_DATABASE_URI')",
                        "CopyCode": "import os\n\nclass Config(object):\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    DEBUG = False\n\n\nclass DevelopmentConfig(Config):\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.getenv('DEV_DATABASE_URI')\n\n\nclass TestingConfig(Config):\n    DEBUG = True\n    TESTING = True\n\n    SQLALCHEMY_DATABASE_URI = os.getenv('TEST_DATABASE_URI')\n    PRESERVE_CONTEXT_ON_EXCEPTION = False\n\n\nclass ProductionConfig(Config):\n    DEBUG = False\n    SQLALCHEMY_DATABASE_URI = os.getenv('PROD_DATABASE_URI')"
                    }
                },
                {
                    "id": 11,
                    "instruction": "Go to your \"db.py\" file. Paste in the following code. ",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from flask_sqlalchemy import SQLAlchemy \n\ndb = SQLAlchemy()\n\ndef init_app(app):\n    db.init_app(app)",
                        "CopyCode": "from flask_sqlalchemy import SQLAlchemy \n\ndb = SQLAlchemy()\n\ndef init_app(app):\n    db.init_app(app)"
                    }
                },
                {
                    "id": 12,
                    "instruction": "Now go to your api folder. In \"errors\" paste the following code into the \"custom_exceptions.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "class NoNotesFoundError(Exception):\n\n    def __init__(self, message=\"No Notes found\"):\n        self.message = message\n        super().__init__(self.message)\n\n\nclass InvalidCredentialsError(Exception):\n    \n    def __init__(self, message=\"Invalid username or password\"):\n        self.message = message\n        super().__init__(self.message)",
                        "CopyCode": "class NoNotesFoundError(Exception):\n\n    def __init__(self, message=\"No Notes found\"):\n        self.message = message\n        super().__init__(self.message)\n\n\nclass InvalidCredentialsError(Exception):\n    \n    def __init__(self, message=\"Invalid username or password\"):\n        self.message = message\n        super().__init__(self.message)" 
                    }
                },
                {
                    "id": 13,
                    "instruction": "In the \"models\" folder paste the following code into the \"db_models.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from sqlalchemy import Column, ForeignKey, func\nfrom sqlalchemy.orm import relationship, Mapped, mapped_column\nfrom datetime import datetime\nfrom db import db\n\n# Association table for the many-to-many relationship between Notes and Tags\nnote_tags_association_table = db.Table(\n    'note_tags', db.Model.metadata,\n    Column('note_id', db.Integer, ForeignKey('notes.note_id', ondelete='CASCADE'), primary_key=True),\n    Column('tag_id', db.Integer, ForeignKey('tags.tag_id', ondelete='CASCADE'), primary_key=True)\n)\n\n\nclass User(db.Model):\n    \"\"\"\n    User model for the database interactions.\n    \"\"\"\n    __tablename__ = 'users'\n\n    user_id: Mapped[int] = mapped_column(db.Integer, primary_key=True)\n    username: Mapped[str] = mapped_column(db.String(80), unique=True, nullable=False)\n    email: Mapped[str] = mapped_column(db.String(120), unique=True, nullable=False)\n    password_hash: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    created_at: Mapped[datetime] = mapped_column(db.DateTime, nullable=False, default=func.now())\n\n    # One-to-many relationship with Note model\n    notes = relationship('Note', back_populates='user', cascade=\"all, delete-orphan\")\n\n    def to_dict(self):\n        \"\"\"Convert the user object to a dictionary, excluding sensitive data.\"\"\"\n        return {\n            \"user_id\": self.user_id,\n            \"username\": self.username,\n            \"email\": self.email,\n            \"created_at\": self.created_at.isoformat()\n        }\n\n\nclass Note(db.Model):\n    \"\"\"\n    Note model for the database interactions.\n    \"\"\"\n    __tablename__ = 'notes'\n\n    note_id: Mapped[int] = mapped_column(db.Integer, primary_key=True)\n    title: Mapped[str] = mapped_column(db.String(200))\n    content: Mapped[str] = mapped_column(db.Text)\n    created_at: Mapped[datetime] = mapped_column(db.DateTime, default=func.now())\n    updated_at: Mapped[datetime] = mapped_column(db.DateTime, default=func.now(), onupdate=func.now())\n    user_id: Mapped[int] = mapped_column(db.Integer, ForeignKey('users.user_id', ondelete='CASCADE'), nullable=False)\n\n    # Many-to-one relationship with User model\n    user = relationship('User', back_populates='notes')\n\n    # Many-to-many relationship with Tag model using note_tags_association_table\n    tags = relationship('Tag', secondary=note_tags_association_table, back_populates='notes')\n\n    def to_dict(self):\n        return {\n            \"note_id\": self.note_id,\n            \"title\": self.title,\n            \"content\": self.content,\n            \"created_at\": self.created_at.isoformat(),\n            \"updated_at\": self.updated_at.isoformat(),\n            \"user_id\": self.user_id,\n            \"tags\": [tag.to_dict() for tag in self.tags]\n        }\n\n\nclass Tag(db.Model):\n    __tablename__ = 'tags'\n\n    tag_id: Mapped[int] = mapped_column(db.Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(50), unique=True, nullable=False)\n\n    # Many-to-many relationship with Note model using note_tags_association_table\n    notes = relationship('Note', secondary=note_tags_association_table, back_populates='tags')\n\n    def to_dict(self):\n        return {\n            \"tag_id\": self.tag_id,\n            \"name\": self.name,\n            \"notes\": [note.note_id for note in self.notes]\n        }\n",
                        "CopyCode": "from sqlalchemy import Column, ForeignKey, func\nfrom sqlalchemy.orm import relationship, Mapped, mapped_column\nfrom datetime import datetime\nfrom db import db\n\n# Association table for the many-to-many relationship between Notes and Tags\nnote_tags_association_table = db.Table(\n    'note_tags', db.Model.metadata,\n    Column('note_id', db.Integer, ForeignKey('notes.note_id', ondelete='CASCADE'), primary_key=True),\n    Column('tag_id', db.Integer, ForeignKey('tags.tag_id', ondelete='CASCADE'), primary_key=True)\n)\n\n\nclass User(db.Model):\n    \"\"\"\n    User model for the database interactions.\n    \"\"\"\n    __tablename__ = 'users'\n\n    user_id: Mapped[int] = mapped_column(db.Integer, primary_key=True)\n    username: Mapped[str] = mapped_column(db.String(80), unique=True, nullable=False)\n    email: Mapped[str] = mapped_column(db.String(120), unique=True, nullable=False)\n    password_hash: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    created_at: Mapped[datetime] = mapped_column(db.DateTime, nullable=False, default=func.now())\n\n    # One-to-many relationship with Note model\n    notes = relationship('Note', back_populates='user', cascade=\"all, delete-orphan\")\n\n    def to_dict(self):\n        \"\"\"Convert the user object to a dictionary, excluding sensitive data.\"\"\"\n        return {\n            \"user_id\": self.user_id,\n            \"username\": self.username,\n            \"email\": self.email,\n            \"created_at\": self.created_at.isoformat()\n        }\n\n\nclass Note(db.Model):\n    \"\"\"\n    Note model for the database interactions.\n    \"\"\"\n    __tablename__ = 'notes'\n\n    note_id: Mapped[int] = mapped_column(db.Integer, primary_key=True)\n    title: Mapped[str] = mapped_column(db.String(200))\n    content: Mapped[str] = mapped_column(db.Text)\n    created_at: Mapped[datetime] = mapped_column(db.DateTime, default=func.now())\n    updated_at: Mapped[datetime] = mapped_column(db.DateTime, default=func.now(), onupdate=func.now())\n    user_id: Mapped[int] = mapped_column(db.Integer, ForeignKey('users.user_id', ondelete='CASCADE'), nullable=False)\n\n    # Many-to-one relationship with User model\n    user = relationship('User', back_populates='notes')\n\n    # Many-to-many relationship with Tag model using note_tags_association_table\n    tags = relationship('Tag', secondary=note_tags_association_table, back_populates='notes')\n\n    def to_dict(self):\n        return {\n            \"note_id\": self.note_id,\n            \"title\": self.title,\n            \"content\": self.content,\n            \"created_at\": self.created_at.isoformat(),\n            \"updated_at\": self.updated_at.isoformat(),\n            \"user_id\": self.user_id,\n            \"tags\": [tag.to_dict() for tag in self.tags]\n        }\n\n\nclass Tag(db.Model):\n    __tablename__ = 'tags'\n\n    tag_id: Mapped[int] = mapped_column(db.Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(50), unique=True, nullable=False)\n\n    # Many-to-many relationship with Note model using note_tags_association_table\n    notes = relationship('Note', secondary=note_tags_association_table, back_populates='tags')\n\n    def to_dict(self):\n        return {\n            \"tag_id\": self.tag_id,\n            \"name\": self.name,\n            \"notes\": [note.note_id for note in self.notes]\n        }\n"
                    }
                },
                {
                    "id": 14,
                    "instruction": "In the \"repositories\" folder paste the following code into the \"note_repository.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from api.models.db_models import Note, Tag\n\ndef get_notes_by_user(user_id: int) -> list:\n    return Note.query.filter_by(user_id=user_id).all()\n\ndef get_notes_by_tag(tag_name: str) -> list:\n    tag = Tag.query.filter_by(name=tag_name).first()\n    if tag:\n        return tag.notes\n    return []",
                        "CopyCode": "from api.models.db_models import Note, Tag\n\ndef get_notes_by_user(user_id: int) -> list:\n    return Note.query.filter_by(user_id=user_id).all()\n\ndef get_notes_by_tag(tag_name: str) -> list:\n    tag = Tag.query.filter_by(name=tag_name).first()\n    if tag:\n        return tag.notes\n    return []"
                    }
                },
                {
                    "id": 15,
                    "instruction": "In the \"repositories\" folder paste the following code into the \"user_repository.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from api.models.db_models import User\nfrom db import db\n\ndef create_user(username: str, email: str, password_hash: str) -> User:\n    new_user = User(username=username, email=email, password_hash=password_hash)\n    db.session.add(new_user)\n    db.session.commit()\n    return new_user\n\ndef get_user_by_username(username: str) -> User:\n    return User.query.filter_by(username=username).first()\n\ndef get_all_db_users():\n    try:\n        users = User.query.all()\n        return [user.to_dict() for user in users]\n    except Exception as e:\n        db.session.rollback()\n        raise e",
                        "CopyCode": "from api.models.db_models import User\nfrom db import db\n\ndef create_user(username: str, email: str, password_hash: str) -> User:\n    new_user = User(username=username, email=email, password_hash=password_hash)\n    db.session.add(new_user)\n    db.session.commit()\n    return new_user\n\ndef get_user_by_username(username: str) -> User:\n    return User.query.filter_by(username=username).first()\n\ndef get_all_db_users():\n    try:\n        users = User.query.all()\n        return [user.to_dict() for user in users]\n    except Exception as e:\n        db.session.rollback()\n        raise e"
                    }
                },
                {
                    "id": 16,
                    "instruction": "In the \"routes\" folder paste the following code into the \"endpoints.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from flask import Blueprint, jsonify, request\nfrom api.repositories.user_repository import get_all_db_users\nfrom sqlalchemy import text\n\nfrom api.schemas.user_schema import UserLoginSchema, UserSchema\nfrom api.services.note_service import fetch_notes_by_tag, fetch_notes_by_user, get_all_tags_from_users_notes\nfrom api.services.user_service import add_user, sign_in_user, get_user\nfrom db import db\n\n\nroutes_blueprint = Blueprint('routes', __name__)\n\n@routes_blueprint.route('/', methods=['GET'])\ndef homePage():\n    return jsonify('Returned from your Rest API!!!')\n\n\n@routes_blueprint.route('/test_connection')\ndef test_connection():\n    try:\n        db.session.execute(text('SELECT 1'))\n        db_uri = db.engine.url\n        \n        return f'Connection successful! Database URI: {db_uri}'\n    except Exception as e:\n        return f'Error: {str(e)}'\n    \n\n@routes_blueprint.route('/get_users', methods=['GET'])\ndef get_all_users():\n    try:\n        users_list = get_all_db_users()\n        return jsonify(users_list), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/users', methods=['POST'])\ndef register_user():\n    try:\n        user_data = UserSchema().load(request.json)\n\n        user = add_user(user_data['username'], user_data['email'], user_data['password'])\n\n        if 'error' in user:\n            return jsonify(user), 400\n\n        return jsonify(user), 201\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n    \n\n@routes_blueprint.route('/users/login', methods=['POST'])\ndef login_user():\n    try:\n\n        login_data = UserLoginSchema().load(request.json)\n\n        user = sign_in_user(login_data['username'], login_data['password'])\n\n        if 'error' in user:\n            return jsonify(user), 400\n\n        return jsonify(user), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n    \n\n@routes_blueprint.route('/users/<int:user_id>/notes', methods=['GET'])\ndef get_notes_by_user(user_id):\n    try:\n        notes = fetch_notes_by_user(user_id)\n        return jsonify(notes), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/notes/tag/<string:tag_name>', methods=['GET'])\ndef get_notes_by_tag(tag_name):\n    try:\n        notes = fetch_notes_by_tag(tag_name)\n        return jsonify(notes), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/users/<int:user_id>/tags', methods=['GET'])\ndef get_all_tags(user_id):\n    try:\n        tags = get_all_tags_from_users_notes(user_id)\n        return jsonify(tags), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/users/<string:username>', methods=['GET'])\ndef get_user_by_username(username):\n    try:\n        user = get_user(username)\n        return jsonify(user), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n",
                        "CopyCode": "from flask import Blueprint, jsonify, request\nfrom api.repositories.user_repository import get_all_db_users\nfrom sqlalchemy import text\n\nfrom api.schemas.user_schema import UserLoginSchema, UserSchema\nfrom api.services.note_service import fetch_notes_by_tag, fetch_notes_by_user, get_all_tags_from_users_notes\nfrom api.services.user_service import add_user, sign_in_user, get_user\nfrom db import db\n\n\nroutes_blueprint = Blueprint('routes', __name__)\n\n@routes_blueprint.route('/', methods=['GET'])\ndef homePage():\n    return jsonify('Returned from your Rest API!!!')\n\n\n@routes_blueprint.route('/test_connection')\ndef test_connection():\n    try:\n        db.session.execute(text('SELECT 1'))\n        db_uri = db.engine.url\n        \n        return f'Connection successful! Database URI: {db_uri}'\n    except Exception as e:\n        return f'Error: {str(e)}'\n    \n\n@routes_blueprint.route('/get_users', methods=['GET'])\ndef get_all_users():\n    try:\n        users_list = get_all_db_users()\n        return jsonify(users_list), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/users', methods=['POST'])\ndef register_user():\n    try:\n        user_data = UserSchema().load(request.json)\n\n        user = add_user(user_data['username'], user_data['email'], user_data['password'])\n\n        if 'error' in user:\n            return jsonify(user), 400\n\n        return jsonify(user), 201\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n    \n\n@routes_blueprint.route('/users/login', methods=['POST'])\ndef login_user():\n    try:\n\n        login_data = UserLoginSchema().load(request.json)\n\n        user = sign_in_user(login_data['username'], login_data['password'])\n\n        if 'error' in user:\n            return jsonify(user), 400\n\n        return jsonify(user), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n    \n\n@routes_blueprint.route('/users/<int:user_id>/notes', methods=['GET'])\ndef get_notes_by_user(user_id):\n    try:\n        notes = fetch_notes_by_user(user_id)\n        return jsonify(notes), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/notes/tag/<string:tag_name>', methods=['GET'])\ndef get_notes_by_tag(tag_name):\n    try:\n        notes = fetch_notes_by_tag(tag_name)\n        return jsonify(notes), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/users/<int:user_id>/tags', methods=['GET'])\ndef get_all_tags(user_id):\n    try:\n        tags = get_all_tags_from_users_notes(user_id)\n        return jsonify(tags), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/users/<string:username>', methods=['GET'])\ndef get_user_by_username(username):\n    try:\n        user = get_user(username)\n        return jsonify(user), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n"
                    }
                },
                {
                    "id": 17,
                    "instruction": "In the \"schemas\" folder paste the following code into the \"user_schema.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from marshmallow import Schema, fields, validate\n\nclass UserSchema(Schema):\n    username = fields.Str(required=True, validate=validate.Length(min=1, max=80))\n    email = fields.Email(required=True, validate=validate.Length(max=120))\n    password = fields.Str(required=True, validate=validate.Length(min=6))\n\n\nclass UserLoginSchema(Schema):\n    username = fields.Str(required=True, validate=validate.Length(min=1, max=80))\n    password = fields.Str(required=True, validate=validate.Length(min=6))\n",
                        "CopyCode": "from marshmallow import Schema, fields, validate\n\nclass UserSchema(Schema):\n    username = fields.Str(required=True, validate=validate.Length(min=1, max=80))\n    email = fields.Email(required=True, validate=validate.Length(max=120))\n    password = fields.Str(required=True, validate=validate.Length(min=6))\n\n\nclass UserLoginSchema(Schema):\n    username = fields.Str(required=True, validate=validate.Length(min=1, max=80))\n    password = fields.Str(required=True, validate=validate.Length(min=6))\n"
                    }
                },
                {
                    "id": 18,
                    "instruction": "In the \"services\" folder paste the following code into the \"note_service.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from api.repositories.note_repository import get_notes_by_tag, get_notes_by_user\n\ndef fetch_notes_by_user(user_id: int) -> list:\n    notes = get_notes_by_user(user_id)\n    return [note.to_dict() for note in notes]\n\n\ndef fetch_notes_by_tag(tag_name: str) -> list:\n    notes = get_notes_by_tag(tag_name)\n    return [note.to_dict() for note in notes]\n\n\ndef get_all_tags_from_users_notes(user_id: int) -> list:\n\n    notes = get_notes_by_user(user_id)\n\n    tags = set()\n\n    for note in notes:\n        for tag in note.tags:\n            tags.add(tag.name)\n            \n    return list(tags)",
                        "CopyCode": "from api.repositories.note_repository import get_notes_by_tag, get_notes_by_user\n\ndef fetch_notes_by_user(user_id: int) -> list:\n    notes = get_notes_by_user(user_id)\n    return [note.to_dict() for note in notes]\n\n\ndef fetch_notes_by_tag(tag_name: str) -> list:\n    notes = get_notes_by_tag(tag_name)\n    return [note.to_dict() for note in notes]\n\n\ndef get_all_tags_from_users_notes(user_id: int) -> list:\n\n    notes = get_notes_by_user(user_id)\n\n    tags = set()\n\n    for note in notes:\n        for tag in note.tags:\n            tags.add(tag.name)\n            \n    return list(tags)"
                    }
                },
                {
                    "id": 19,
                    "instruction": "In the \"services\" folder paste the following code into the \"user_service.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from api.errors.custom_exceptions import InvalidCredentialsError\nfrom api.repositories.user_repository import create_user, get_user_by_username\nfrom werkzeug.security import check_password_hash, generate_password_hash\n\n\ndef add_user(username: str, email: str, password: str) -> dict:\n\n    password_hash = generate_password_hash(password)\n    \n    if get_user_by_username(username):\n        return {\"error\": \"Username already exists\"}\n    \n    user = create_user(username, email, password_hash)\n    \n    return user.to_dict()\n\n\ndef sign_in_user(username: str, password: str) -> dict:\n    user = get_user_by_username(username)\n\n    if user and check_password_hash(user.password_hash, password):\n        return {\"message\": \"User signed in successfully\", \"user\": user.to_dict()}\n    else:\n        raise InvalidCredentialsError()\n    \ndef get_user(username: str) -> dict:\n    try: \n        user = get_user_by_username(username)\n        return user.to_dict()\n    except Exception:\n        raise InvalidCredentialsError()\n",
                        "CopyCode": "from api.errors.custom_exceptions import InvalidCredentialsError\nfrom api.repositories.user_repository import create_user, get_user_by_username\nfrom werkzeug.security import check_password_hash, generate_password_hash\n\n\ndef add_user(username: str, email: str, password: str) -> dict:\n\n    password_hash = generate_password_hash(password)\n    \n    if get_user_by_username(username):\n        return {\"error\": \"Username already exists\"}\n    \n    user = create_user(username, email, password_hash)\n    \n    return user.to_dict()\n\n\ndef sign_in_user(username: str, password: str) -> dict:\n    user = get_user_by_username(username)\n\n    if user and check_password_hash(user.password_hash, password):\n        return {\"message\": \"User signed in successfully\", \"user\": user.to_dict()}\n    else:\n        raise InvalidCredentialsError()\n    \ndef get_user(username: str) -> dict:\n    try: \n        user = get_user_by_username(username)\n        return user.to_dict()\n    except Exception:\n        raise InvalidCredentialsError()\n"
                    }
                },
                {
                    "id": 20,
                    "instruction": "In the \"utils\" folder paste the following code into the \"note_verification.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from api.models.db_models import Note\n\ndef verify_note_belongs_to_user(note_id: int, user_id: int) -> bool:\n    note = Note.query.filter_by(note_id=note_id, user_id=user_id).first()\n    return note is not None\n",
                        "CopyCode": "from api.models.db_models import Note\n\ndef verify_note_belongs_to_user(note_id: int, user_id: int) -> bool:\n    note = Note.query.filter_by(note_id=note_id, user_id=user_id).first()\n    return note is not None\n"
                    }
                },
                {
                    "id": 21,
                    "instruction": "To run your Rest API run the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "",
                        "FormatCode": "cd Notes-Rest-Api\nsource venv/bin/activate\nflask run\ndeactivate\n",
                        "CopyCode": "cd Notes-Rest-Api\nsource venv/bin/activate\nflask run\ndeactivate\n"
                    }
                },
                {
                    "id": 22,
                    "instruction": "Open your browser to test endpoints. Paste the URI in your browser",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "URI Endpoint",
                        "FormatCode": "http://127.0.0.1:5000/test_connection",
                        "CopyCode": "http://127.0.0.1:5000/test_connection"
                    }
                },
                {
                    "id": 23,
                    "instruction": "Open your browser to test endpoints. Paste the URI in your browser",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "URI Endpoint",
                        "FormatCode": "http://127.0.0.1:5000/get_users",
                        "CopyCode": "http://127.0.0.1:5000/get_users"
                    }
                },
                {
                    "id": 24,
                    "instruction": "You can also open a terminal and use \"curl\" commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Request",
                        "FormatCode": "curl -X GET http://127.0.0.1:5000/get_users",
                        "CopyCode": "curl -X GET http://127.0.0.1:5000/get_users"
                    }
                },
                {
                    "id": 25,
                    "instruction": "Commit your changes to Github. Make sure \".env\" is in the output of \"git clean -ndX\". It's not removing anything it's just showing you what files are being ignored by git.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "deactivate\ngit clean -ndX\ngit add .\ngit commit -m \"Added main logic\"\ngit push",
                        "CopyCode": "deactivate\ngit clean -ndX\ngit add .\ngit commit -m \"Added main logic\"\ngit push"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Add Testing to your Flask Rest Api",
                    "desc": "Explains how to write tests using the pytest framework for your Rest Api."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Open your \"Notes-Rest-API\" in VSCode. Go to the \"tests\" folder in the top-most directory. In the \"db_testing\" folder paste the following code into the \"test_db_connection.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from db import db\nimport pytest\nfrom sqlalchemy import text\n\n@pytest.mark.order(5)\ndef test_database_connection(app):\n    with app.app_context():\n        result = db.session.execute(text(\"SELECT * FROM Users LIMIT 1;\"))\n        first_row = result.fetchone()\n        assert first_row is not None, \"Database returned no data!\"\n",
                        "CopyCode": "from db import db\nimport pytest\nfrom sqlalchemy import text\n\n@pytest.mark.order(5)\ndef test_database_connection(app):\n    with app.app_context():\n        result = db.session.execute(text(\"SELECT * FROM Users LIMIT 1;\"))\n        first_row = result.fetchone()\n        assert first_row is not None, \"Database returned no data!\"\n"
                    }
                },
                {
                    "id": 2,
                    "instruction": "In the \"endpoint_testing\" folder paste the following code into the \"test_note_endpoints.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "import json\nimport pytest\n\n@pytest.mark.order(1)\ndef test_get_notes_by_user(client):\n\n    user_data = {\n        \"username\": \"testuser3\",\n        \"email\": \"testuser3@example.com\",\n        \"password\": \"testpassword3\"\n    }\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n    user_id = response.json[\"user_id\"]\n\n    response = client.get(f'/users/{user_id}/notes')\n\n    assert response.status_code == 200\n    assert isinstance(response.json, list)\n\n\n@pytest.mark.order(2)\ndef test_get_notes_by_user_no_notes(client):\n\n    user_data = {\n        \"username\": \"testuser4\",\n        \"email\": \"testuser4@example.com\",\n        \"password\": \"testpassword4\"\n    }\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n    user_id = response.json[\"user_id\"]\n\n\n    response = client.get(f'/users/{user_id}/notes')\n\n    assert response.status_code == 200\n    assert response.json == []\n",
                        "CopyCode": "import json\nimport pytest\n\n@pytest.mark.order(1)\ndef test_get_notes_by_user(client):\n\n    user_data = {\n        \"username\": \"testuser3\",\n        \"email\": \"testuser3@example.com\",\n        \"password\": \"testpassword3\"\n    }\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n    user_id = response.json[\"user_id\"]\n\n    response = client.get(f'/users/{user_id}/notes')\n\n    assert response.status_code == 200\n    assert isinstance(response.json, list)\n\n\n@pytest.mark.order(2)\ndef test_get_notes_by_user_no_notes(client):\n\n    user_data = {\n        \"username\": \"testuser4\",\n        \"email\": \"testuser4@example.com\",\n        \"password\": \"testpassword4\"\n    }\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n    user_id = response.json[\"user_id\"]\n\n\n    response = client.get(f'/users/{user_id}/notes')\n\n    assert response.status_code == 200\n    assert response.json == []\n"
                    }
                },
                {
                    "id": 3,
                    "instruction": "In the \"endpoint_testing\" folder paste the following code into the \"test_user_endpoints.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "import json\nimport pytest\n\n@pytest.mark.order(3)\ndef test_register_user(client):\n\n    user_data = {\n        \"username\": \"testuser1\",\n        \"email\": \"testuser1@example.com\",\n        \"password\": \"testpassword1\"\n    }\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n\n    print(f\"Status Code: {response.status_code}\")\n    print(f\"Response Data: {response.get_data(as_text=True)}\")\n\n    assert response.status_code == 201\n    assert response.json[\"username\"] == \"testuser1\"\n    assert \"user_id\" in response.json\n\n\n@pytest.mark.order(4)\ndef test_register_user_existing_username(client):\n\n    user_data = {\n        \"username\": \"testuser2\",\n        \"email\": \"testuser2@example.com\",\n        \"password\": \"testpassword2\"\n    }\n\n    client.post('/users', data=json.dumps(user_data), content_type='application/json')\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n\n    assert response.status_code == 400\n    assert response.json[\"error\"] == \"Username already exists\"\n",
                        "CopyCode": "import json\nimport pytest\n\n@pytest.mark.order(3)\ndef test_register_user(client):\n\n    user_data = {\n        \"username\": \"testuser1\",\n        \"email\": \"testuser1@example.com\",\n        \"password\": \"testpassword1\"\n    }\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n\n    print(f\"Status Code: {response.status_code}\")\n    print(f\"Response Data: {response.get_data(as_text=True)}\")\n\n    assert response.status_code == 201\n    assert response.json[\"username\"] == \"testuser1\"\n    assert \"user_id\" in response.json\n\n\n@pytest.mark.order(4)\ndef test_register_user_existing_username(client):\n\n    user_data = {\n        \"username\": \"testuser2\",\n        \"email\": \"testuser2@example.com\",\n        \"password\": \"testpassword2\"\n    }\n\n    client.post('/users', data=json.dumps(user_data), content_type='application/json')\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n\n    assert response.status_code == 400\n    assert response.json[\"error\"] == \"Username already exists\"\n"
                    }
                },
                {
                    "id": 4,
                    "instruction": "You can test your code by running the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Rest-Api\nsource venv/bin/activate\npython3 -m pytest tests/",
                        "CopyCode": "cd Notes-Rest-Api\nsource venv/bin/activate\npython3 -m pytest tests/"
                    }
                },
                {
                    "id": 5,
                    "instruction": "You can add the -s flag to allow print statements and log output.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "python3 -m pytest -s tests/",
                        "CopyCode": "python3 -m pytest -s tests/"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Push your changes to Github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "deactivate\ngit clean -ndX\ngit add .\ngit commit -m \"Added testing\"\ngit push",
                        "CopyCode": "deactivate\ngit clean -ndX\ngit add .\ngit commit -m \"Added testing\"\ngit push"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Vue Website Folder Setup Explanation",
                    "desc": "Explanation of the folders that will be used for your frontend code."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "<u><b>src/api</u></b> - Functions used to call and interact with your backend Rest API endpoints. It's a similar concept to the repository functions interacting with the database."
                },
                {
                    "id": 2,
                    "instruction": "<u><b>src/assets</u></b> - Where you'll put things like your pictures, "
                },
                {
                    "id": 3,
                    "instruction": "<u><b>src/components</u></b> - Components that you can use in your views. An example would a Note card."
                },
                {
                    "id": 4,
                    "instruction": "<u><b>src/lib</u></b> - Where you'll put the link to where your backend Rest API is being hosted. For this project it should probably be something like \"http://127.0.0.1:5000\" in Development."
                },
                {
                    "id": 5,
                    "instruction": "<u><b>src/router</u></b> - The paths of your application. Used to navigate between pages in your application."
                },
                {
                    "id": 6,
                    "instruction": "<u><b>src/services</u></b> - Business logic for your api functions."
                },
                {
                    "id": 7,
                    "instruction": "<u><b>src/stores</u></b> - A management system you can use to store data and methods you can use to modify and interact with it. It's pretty similar to a class."
                },
                {
                    "id": 8,
                    "instruction": "<u><b>src/utils</u></b> - Common functions that are used across various views."
                },
                {
                    "id": 9,
                    "instruction": "<u><b>src/views</u></b> - The pages of your application. The components will be used in these views."
                },
                {
                    "id": 10,
                    "instruction": "<u><b>public</u></b> - Where to store things like videos and files that the user can download"
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Create your Vue Website",
                    "desc": "Explains how to create your Vue Website and connect it to your Flask Rest API."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "The Github Repoistory for this code can be found [here](git@github.com:MichaelT-W23/Notes-Frontend.git).",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "npm install -g create-vite",
                        "CopyCode": "npm install -g create-vite"
                    }
                },
                {
                    "id": 2,
                    "instruction": "Go to your terminal and run the following commands. Press \"enter\" when prompted for Package name.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "npm install -g create-vite",
                        "CopyCode": "npm install -g create-vite"
                    }
                },
                {
                    "id": 3,
                    "instruction": "Now npm install and install vue-router. Answer 'y' to any prompts. Earlier you shouldve made a git repository called \"Notes-Frontend\".",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Frontend\nnpm init vite@latest . -- --template vue\n\n* When prompted select \"Remove existing files and continue\" *\n* Press return when prompted for package name *",
                        "CopyCode": "cd Notes-Frontend\nnpm init vite@latest . -- --template vue\n\n* When prompted select \"Remove existing files and continue\" *\n* Press return when prompted for package name *"
                    }
                },
                {
                    "id": 4,
                    "instruction": "Now npm install and install vue-router.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "npm install\nnpm install vue-router@4",
                        "CopyCode": "npm install\nnpm install vue-router@4"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Run the following command and open it in a broswer to ensure it's working. Press \"control + c\" to quit.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "npm run dev",
                        "CopyCode": "npm run dev"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Delete unused files.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "rm src/components/HelloWorld.vue\nrm src/assets/vue.svg\nrm src/style.css",
                        "CopyCode": "rm src/components/HelloWorld.vue\nrm src/assets/vue.svg\nrm src/style.css"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Now make the new folders and files using the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd src\nmkdir -p api lib router services stores utils views",
                        "CopyCode": "cd src\nmkdir -p api lib router services stores utils views"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Create the following files in your project.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "touch api/notesAPI.js\ntouch api/userAPI.js\n\ntouch components/NotesCard.vue\n\ntouch lib/axios.js\n\ntouch router/index.js\n\ntouch services/notesService.js\ntouch services/userService.js\n\ntouch stores/starred.js\ntouch stores/auth.js\n\ntouch utils/dates.js\n\ntouch views/SignIn.vue \ntouch views/SignUp.vue \ntouch views/MainPage.vue \ntouch views/Starred.vue\nclear",
                        "CopyCode": "touch api/notesAPI.js\ntouch api/userAPI.js\n\ntouch components/NotesCard.vue\n\ntouch lib/axios.js\n\ntouch router/index.js\n\ntouch services/notesService.js\ntouch services/userService.js\n\ntouch stores/starred.js\ntouch stores/auth.js\n\ntouch utils/dates.js\n\ntouch views/SignIn.vue \ntouch views/SignUp.vue \ntouch views/MainPage.vue \ntouch views/Starred.vue\nclear"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Download this &notes.jpg&(/download/notes.jpg) image and put it in your \"src/assets\" folder."
                },
                {
                    "id": 10,
                    "instruction": "Now install the npm libraries.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "npm install axios\nnpm install pinia",
                        "CopyCode": "npm install axios\nnpm install pinia"
                    }
                },
                {
                    "id": 11,
                    "instruction": "After you've done that push your folder structure to Github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Frontend\ngit add .\ngit commit -m \"Added folder structure\"\ngit push\n",
                        "CopyCode": "cd Notes-Frontend\ngit add .\ngit commit -m \"Added folder structure\"\ngit push\n"
                    }
                },
                {
                    "id": 12,
                    "instruction": "Now go back to your terminal. Copy and record the output http link of your Rest Api.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Rest-Api\nsource venv/bin/activate\nflask run\n\n* Press control + c * \n\ndeactivate\ncd ..\nclear",
                        "CopyCode": "cd Notes-Rest-Api\nsource venv/bin/activate\nflask run\n\n* Press control + c * \n\ndeactivate\ncd ..\nclear"
                    }
                },
                {
                    "id": 13,
                    "instruction": "Now open your \"Notes-Frontend\" folder in VSCode. In your \"src/lib\" folder paste the following code into your \"axios.js\" file. Replace the REST_API_URI with the http link you copied in step 11.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "HTML",
                        "DisplayLang": "Vue",
                        "FormatCode": "import axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://127.0.0.1:5000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  }\n});\n\nexport default axiosInstance;",
                        "CopyCode": "import axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://127.0.0.1:5000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  }\n});\n\nexport default axiosInstance;"
                    }
                },
                {
                    "id": 14,
                    "instruction": "In \"src/router\" open the \"index.js\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "HTML",
                        "DisplayLang": "Vue",
                        "FormatCode": "import { createRouter, createWebHistory } from 'vue-router';\n\nimport SignIn from \"../views/SignIn.vue\";\nimport SignUp from \"../views/SignUp.vue\";\nimport MainPage from \"../views/MainPage.vue\";\nimport Starred from \"../views/Starred.vue\";\n\nconst routes = [\n    {\n        path: '/',\n        component: SignIn\n    },\n  {\n        path: '/Register',\n        component: SignUp\n    },\n  {\n        path: '/Dashboard',\n        component: MainPage\n    },\n    {\n        path: '/Starred',\n        component: Starred\n    }\n]\n\nconst router = createRouter({\n    history: createWebHistory('/'),\n    routes\n});\n\nexport default router;",
                        "CopyCode": "import { createRouter, createWebHistory } from 'vue-router';\n\nimport SignIn from \"../views/SignIn.vue\";\nimport SignUp from \"../views/SignUp.vue\";\nimport MainPage from \"../views/MainPage.vue\";\nimport Starred from \"../views/Starred.vue\";\n\nconst routes = [\n\t{\n\t\tpath: '/',\n\t\tcomponent: SignIn\n\t},\n  {\n\t\tpath: '/Register',\n\t\tcomponent: SignUp\n\t},\n  {\n\t\tpath: '/Dashboard',\n\t\tcomponent: MainPage\n\t},\n\t{\n\t\tpath: '/Starred',\n\t\tcomponent: Starred\n\t}\n]\n\nconst router = createRouter({\n\thistory: createWebHistory('/'),\n\troutes\n});\n\nexport default router;"
                    }
                },
                {
                    "id": 15,
                    "instruction": "In the \"src/api\" folder open the \"userAPI.js\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "FormatCode": "import axiosInstance from '../lib/axios.js'\n\n\nexport async function registerUser(userData) {\n  const response = await axiosInstance.post('/users', userData);\n  return response.data;\n}\n\n\nexport async function loginUser(userData) {\n  const response = await axiosInstance.post('/users/login', userData);\n  return response.data;\n}\n\n\nexport async function getUserByUsername(username) {\n  const response = await axiosInstance.get(`/users/${username}`);\n  return response.data;\n}\n\n",
                        "CopyCode": "import axiosInstance from '../lib/axios.js'\n\n\nexport async function registerUser(userData) {\n  const response = await axiosInstance.post('/users', userData);\n  return response.data;\n}\n\n\nexport async function loginUser(userData) {\n  const response = await axiosInstance.post('/users/login', userData);\n  return response.data;\n}\n\n\nexport async function getUserByUsername(username) {\n  const response = await axiosInstance.get(`/users/${username}`);\n  return response.data;\n}\n\n"
                    }
                },
                {
                    "id": 16,
                    "instruction": "In the \"src/api\" folder open the \"notesAPI.js\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "FormatCode": "import axiosInstance from '../lib/axios.js'\n\n\nexport async function getUserNotes(userId) {\n  const response = await axiosInstance.get(`/users/${userId}/notes`);\n  return response.data;\n}\n\n\nexport async function getNotesByTag(tagName) {\n  const response = await axiosInstance.get(`/notes/tag/${tagName}`);\n  return response.data;\n}\n\n\nexport async function getAllTags(userId) {\n  const response = await axiosInstance.get(`/users/${userId}/tags`);\n  return response.data;\n}\n\n    ",
                        "CopyCode": "import axiosInstance from '../lib/axios.js'\n\n\nexport async function getUserNotes(userId) {\n  const response = await axiosInstance.get(`/users/${userId}/notes`);\n  return response.data;\n}\n\n\nexport async function getNotesByTag(tagName) {\n  const response = await axiosInstance.get(`/notes/tag/${tagName}`);\n  return response.data;\n}\n\n\nexport async function getAllTags(userId) {\n  const response = await axiosInstance.get(`/users/${userId}/tags`);\n  return response.data;\n}\n\n    "
                    }
                },
                {
                    "id": 17,
                    "instruction": "In the \"src/services\" folder open the \"notesService.js\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "FormatCode": "import {\n  getUserNotes,\n  getNotesByTag,\n  getAllTags\n} from '../api/notesAPI.js'\n\nexport async function getAllUserNotes(userId) {\n  try {\n    const data = await getUserNotes(userId);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getNotesByTagName(tagName) {\n  try {\n    const data = await getNotesByTag(tagName);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getAllUserTags(userId) {\n  try {\n    const data = await getAllTags(userId);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}",
                        "CopyCode": "import {\n  getUserNotes,\n  getNotesByTag,\n  getAllTags\n} from '../api/notesAPI.js'\n\nexport async function getAllUserNotes(userId) {\n  try {\n    const data = await getUserNotes(userId);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getNotesByTagName(tagName) {\n  try {\n    const data = await getNotesByTag(tagName);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getAllUserTags(userId) {\n  try {\n    const data = await getAllTags(userId);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}"
                    }
                },
                {
                    "id": 18,
                    "instruction": "In the \"src/services\" folder open the \"userService.js\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "FormatCode": "import {\n  registerUser,\n  loginUser,\n  getUserByUsername\n} from '../api/userAPI.js';\n\nexport async function createNewUser(userData) {\n  try {\n    const data = await registerUser(userData);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function loginExistingUser(userData) {\n  try {\n    const data = await loginUser(userData);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getUser(username) {\n  try {\n    const data = await getUserByUsername(username);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}",
                        "CopyCode": "import {\n  registerUser,\n  loginUser,\n  getUserByUsername\n} from '../api/userAPI.js';\n\nexport async function createNewUser(userData) {\n  try {\n    const data = await registerUser(userData);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function loginExistingUser(userData) {\n  try {\n    const data = await loginUser(userData);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getUser(username) {\n  try {\n    const data = await getUserByUsername(username);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}"
                    }
                },
                {
                    "id": 19,
                    "instruction": "In the \"src/stores\" folder open the \"auth.js\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "FormatCode": "import { defineStore } from 'pinia';\nimport { ref } from 'vue';\n\nexport const useAuthStore = defineStore('auth', () => {\n\n  const user = ref({\n    username: localStorage.getItem('username') || null,\n    email: null,\n  });\n\n  function login(userData) {\n    user.value = userData;\n    localStorage.setItem('username', userData.username);\n  }\n  \n  if (localStorage.getItem('username')) {\n    user.value.username = localStorage.getItem('username');\n  }\n\n  function logout() {\n    user.value = {\n      username: null,\n      email: null,\n      userId: null\n    };\n\n    localStorage.removeItem('username');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('notes');\n    localStorage.removeItem('tags');\n  }\n\n  function getCurrentUser() {\n    return user.value;\n  }\n\n  function getUsername() {\n    return user.value.username || localStorage.getItem('username');\n  }\n\n  function getEmail() {\n    return user.value.email;\n  }\n\n  function setUserId(id) {\n    user.value.userId = id;\n    localStorage.setItem('userId', id);\n  }\n\n  function getUserId() {\n    return localStorage.getItem('userId');\n  }\n\n  function setNotes(notes) {\n    user.value.notes = notes;\n    localStorage.setItem('notes', JSON.stringify(notes));\n  }\n\n  function getNotes() {\n    return JSON.parse(localStorage.getItem('notes'));\n  }\n\n  function setTags(tags) {\n    user.value.tags = tags;\n    localStorage.setItem('tags', JSON.stringify(tags));\n  }\n\n  function getTags() {\n    return localStorage.getItem('tags').split(\",\");\n  }\n\n  return { user, login, logout, getCurrentUser, getUsername, getEmail, \n           setUserId, getUserId, setNotes, getNotes, setTags, getTags };\n});\n",
                        "CopyCode": "import { defineStore } from 'pinia';\nimport { ref } from 'vue';\n\nexport const useAuthStore = defineStore('auth', () => {\n\n  const user = ref({\n    username: localStorage.getItem('username') || null,\n    email: null,\n  });\n\n  function login(userData) {\n    user.value = userData;\n    localStorage.setItem('username', userData.username);\n  }\n  \n  if (localStorage.getItem('username')) {\n    user.value.username = localStorage.getItem('username');\n  }\n\n  function logout() {\n    user.value = {\n      username: null,\n      email: null,\n      userId: null\n    };\n\n    localStorage.removeItem('username');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('notes');\n    localStorage.removeItem('tags');\n  }\n\n  function getCurrentUser() {\n    return user.value;\n  }\n\n  function getUsername() {\n    return user.value.username || localStorage.getItem('username');\n  }\n\n  function getEmail() {\n    return user.value.email;\n  }\n\n  function setUserId(id) {\n    user.value.userId = id;\n    localStorage.setItem('userId', id);\n  }\n\n  function getUserId() {\n    return localStorage.getItem('userId');\n  }\n\n  function setNotes(notes) {\n    user.value.notes = notes;\n    localStorage.setItem('notes', JSON.stringify(notes));\n  }\n\n  function getNotes() {\n    return JSON.parse(localStorage.getItem('notes'));\n  }\n\n  function setTags(tags) {\n    user.value.tags = tags;\n    localStorage.setItem('tags', JSON.stringify(tags));\n  }\n\n  function getTags() {\n    return localStorage.getItem('tags').split(\",\");\n  }\n\n  return { user, login, logout, getCurrentUser, getUsername, getEmail, \n           setUserId, getUserId, setNotes, getNotes, setTags, getTags };\n});\n"
                    }
                },
                {
                    "id": 20,
                    "instruction": "In the \"src/stores\" folder open the \"starred.js\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "FormatCode": "import { defineStore } from 'pinia';\nimport { ref, watch } from 'vue';\n\nexport const useNotesStore = defineStore('notes', () => {\n\n  const notes = ref(JSON.parse(localStorage.getItem('notes') || '[]'));\n\n  function addNote(note) {\n    notes.value.push({\n      ...note,\n      starred: true,\n    });\n    saveNotesToLocalStorage();\n  }\n\n  function removeNote(noteId) {\n    notes.value = notes.value.filter(note => note.note_id !== noteId);\n    saveNotesToLocalStorage();\n  }\n\n  function starNote(noteId) {\n    const note = notes.value.find(note => note.note_id === noteId);\n\n    if (note) {\n      note.starred = true;\n      console.log(`Note with ID ${noteId} starred.`);\n      saveNotesToLocalStorage();\n    }\n  }\n\n  function unstarNote(noteId) {\n    const note = notes.value.find(note => note.note_id === noteId);\n    if (note) {\n      note.starred = false;\n      console.log(`Note with ID ${noteId} unstarred.`);\n      saveNotesToLocalStorage();\n    }\n  }\n\n  function getStarredNotes() {\n    return notes.value.filter(note => note.starred);\n  }\n\n  function getNumberOfStoredNotes() {\n    return notes.value.length;\n  }\n\n  function isNoteStarred(note) {\n    const foundNote = notes.value.find(n => n.note_id === note.note_id);\n    return foundNote ? foundNote.starred : false;\n  }\n\n  function saveNotesToLocalStorage() {\n    localStorage.setItem('notes', JSON.stringify(notes.value));\n  }\n\n  watch(notes, (newNotes) => {\n    saveNotesToLocalStorage();\n  }, { deep: true });\n\n  return {\n    notes,\n    addNote,\n    removeNote,\n    starNote,\n    unstarNote,\n    getStarredNotes,\n    getNumberOfStoredNotes,\n    isNoteStarred\n  };\n});\n",
                        "CopyCode": "import { defineStore } from 'pinia';\nimport { ref, watch } from 'vue';\n\nexport const useNotesStore = defineStore('notes', () => {\n\n  const notes = ref(JSON.parse(localStorage.getItem('notes') || '[]'));\n\n  function addNote(note) {\n    notes.value.push({\n      ...note,\n      starred: true,\n    });\n    saveNotesToLocalStorage();\n  }\n\n  function removeNote(noteId) {\n    notes.value = notes.value.filter(note => note.note_id !== noteId);\n    saveNotesToLocalStorage();\n  }\n\n  function starNote(noteId) {\n    const note = notes.value.find(note => note.note_id === noteId);\n\n    if (note) {\n      note.starred = true;\n      console.log(`Note with ID ${noteId} starred.`);\n      saveNotesToLocalStorage();\n    }\n  }\n\n  function unstarNote(noteId) {\n    const note = notes.value.find(note => note.note_id === noteId);\n    if (note) {\n      note.starred = false;\n      console.log(`Note with ID ${noteId} unstarred.`);\n      saveNotesToLocalStorage();\n    }\n  }\n\n  function getStarredNotes() {\n    return notes.value.filter(note => note.starred);\n  }\n\n  function getNumberOfStoredNotes() {\n    return notes.value.length;\n  }\n\n  function isNoteStarred(note) {\n    const foundNote = notes.value.find(n => n.note_id === note.note_id);\n    return foundNote ? foundNote.starred : false;\n  }\n\n  function saveNotesToLocalStorage() {\n    localStorage.setItem('notes', JSON.stringify(notes.value));\n  }\n\n  watch(notes, (newNotes) => {\n    saveNotesToLocalStorage();\n  }, { deep: true });\n\n  return {\n    notes,\n    addNote,\n    removeNote,\n    starNote,\n    unstarNote,\n    getStarredNotes,\n    getNumberOfStoredNotes,\n    isNoteStarred\n  };\n});\n"
                    }
                },
                {
                    "id": 21,
                    "instruction": "In the \"src/utils\" folder open the \"dates.js\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "FormatCode": "export const formatDate = (dateString) => {\n  const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\n  return new Date(dateString).toLocaleDateString(undefined, options);\n};",
                        "CopyCode": "export const formatDate = (dateString) => {\n  const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\n  return new Date(dateString).toLocaleDateString(undefined, options);\n};"
                    }
                },
                {
                    "id": 22,
                    "instruction": "In the \"src/views\" folder open the \"MainPage.vue\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "HTML",
                        "DisplayLang": "Vue",
                        "FormatCode": "<template>\n  <div class=\"container\">\n    <p class=\"title\">{{ authStore.getUsername() }} - {{ authStore.getUserId() }}</p>\n    <img :src=\"NotesPic\" alt=\"Notes Image\" />\n    <div class=\"links\">\n      <router-link to=\"/Starred\">Starred Notes</router-link>\n      <a href=\"#\" @click=\"handleLogout\">Logout</a>\n    </div>\n    <div v-for=\"note in notes\" :key=\"note.id\">\n      <NoteCard :note=\"note\" />\n    </div>\n    <h3>Tags</h3>\n    <ul>\n      <li v-for=\"(tag, index) in tags\" :key=\"index\">{{ tag }}</li>\n    </ul>\n  </div>\n</template>\n\n\n<script setup>\nimport { ref } from 'vue';\nimport { useAuthStore } from \"../stores/auth\";\nimport { getUser } from \"../services/userService\";\nimport { getAllUserNotes, getAllUserTags } from \"../services/notesService\";\nimport NoteCard from \"../components/NotesCard.vue\";\nimport NotesPic from \"../assets/notes.jpg\";\n\nconst authStore = useAuthStore();\nconst notes = ref([]);\nconst tags = ref([]);\n\n// Get all user notes and tags by user id\n// set both in the authStore\ngetUser(authStore.getUsername()) \n  .then((userData) => {\n    const userId = userData.user_id;\n    authStore.setUserId(userId);\n  \n    return Promise.all([getAllUserNotes(userId), getAllUserTags(userId)]);\n  })\n  .then(([fetchedNotes, fetchedTags]) => {\n    notes.value = fetchedNotes.map(note => ({ ...note }));\n    tags.value = fetchedTags;\n\n    console.log(notes.value);\n    console.log(tags.value);\n\n    authStore.setNotes(notes.value);\n    authStore.setTags(tags.value);\n  })\n  .catch((error) => {\n    console.error('Error:', error);\n  });\n\n\nconst handleLogout = () => {\n  authStore.logout();\n  window.location.href = \"/\";\n};\n\n</script>\n\n\n<style scoped>\n.container {\n  position: relative;\n  margin-left: auto;\n  width: 80%; \n  padding: 16px;\n  border-radius: 8px;\n}\n\n.title {\n  font-size: 30px;\n  text-decoration: underline;\n  margin-bottom: 10px;\n}\n\nimg {\n  width: 350px;\n  height: auto;\n  border: 1px solid black;\n  margin-bottom: 10px;\n}\n\n.links {\n  margin-bottom: 16px;\n}\n\n.links a {\n  margin-left: 20px;\n}\n\n</style>\n",
                        "CopyCode": "<template>\n  <div class=\"container\">\n    <p class=\"title\">{{ authStore.getUsername() }} - {{ authStore.getUserId() }}</p>\n    <img :src=\"NotesPic\" alt=\"Notes Image\" />\n    <div class=\"links\">\n      <router-link to=\"/Starred\">Starred Notes</router-link>\n      <a href=\"#\" @click=\"handleLogout\">Logout</a>\n    </div>\n    <div v-for=\"note in notes\" :key=\"note.id\">\n      <NoteCard :note=\"note\" />\n    </div>\n    <h3>Tags</h3>\n    <ul>\n      <li v-for=\"(tag, index) in tags\" :key=\"index\">{{ tag }}</li>\n    </ul>\n  </div>\n</template>\n\n\n<script setup>\nimport { ref } from 'vue';\nimport { useAuthStore } from \"../stores/auth\";\nimport { getUser } from \"../services/userService\";\nimport { getAllUserNotes, getAllUserTags } from \"../services/notesService\";\nimport NoteCard from \"../components/NotesCard.vue\";\nimport NotesPic from \"../assets/notes.jpg\";\n\nconst authStore = useAuthStore();\nconst notes = ref([]);\nconst tags = ref([]);\n\n// Get all user notes and tags by user id\n// set both in the authStore\ngetUser(authStore.getUsername()) \n  .then((userData) => {\n    const userId = userData.user_id;\n    authStore.setUserId(userId);\n  \n    return Promise.all([getAllUserNotes(userId), getAllUserTags(userId)]);\n  })\n  .then(([fetchedNotes, fetchedTags]) => {\n    notes.value = fetchedNotes.map(note => ({ ...note }));\n    tags.value = fetchedTags;\n\n    console.log(notes.value);\n    console.log(tags.value);\n\n    authStore.setNotes(notes.value);\n    authStore.setTags(tags.value);\n  })\n  .catch((error) => {\n    console.error('Error:', error);\n  });\n\n\nconst handleLogout = () => {\n  authStore.logout();\n  window.location.href = \"/\";\n};\n\n</script>\n\n\n<style scoped>\n.container {\n  position: relative;\n  margin-left: auto;\n  width: 80%; \n  padding: 16px;\n  border-radius: 8px;\n}\n\n.title {\n  font-size: 30px;\n  text-decoration: underline;\n  margin-bottom: 10px;\n}\n\nimg {\n  width: 350px;\n  height: auto;\n  border: 1px solid black;\n  margin-bottom: 10px;\n}\n\n.links {\n  margin-bottom: 16px;\n}\n\n.links a {\n  margin-left: 20px;\n}\n\n</style>\n"
                    }
                },
                {
                    "id": 23,
                    "instruction": "In the \"src/views\" folder open the \"SignIn.vue\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "HTML",
                        "DisplayLang": "Vue",
                        "FormatCode": "<template>\n  <div class=\"sign-in-container\">\n    <h1>Sign In</h1>\n    <form @submit.prevent=\"handleSignIn\">\n      <div class=\"input-group\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" v-model=\"username\" id=\"username\" required />\n      </div>\n      <div class=\"input-group\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" v-model=\"password\" id=\"password\" required />\n      </div>\n      <button type=\"submit\">Sign In</button>\n    </form>\n    <router-link to=\"/Register\" class=\"register-link\">Don't Have an Account? Sign up</router-link>\n\n    <p v-if=\"errorMessage\">{{ errorMessage }}</p>\n  </div>\n</template>\n\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport { loginExistingUser } from \"../services/userService\";\nimport { useRouter } from 'vue-router';\nimport { useAuthStore } from \"../stores/auth\";\n\nconst router = useRouter();\nconst authStore = useAuthStore();\n\nconst username = ref('');\nconst password = ref('');\nconst errorMessage = ref('');\n\nconst handleSignIn = async () => {\n  try {\n    const userData = { username: username.value, password: password.value };\n    const response = await loginExistingUser(userData);\n    \n    if (response && response.user) {\n      authStore.logout();\n      authStore.login(response.user);\n      router.push('/Dashboard');\n    } else {\n      errorMessage.value = \"Invalid username or password\";\n    }\n  } catch (error) {\n    console.error(error);\n    errorMessage.value = \"An error occurred during sign-in\";\n  }\n};\n\nonMounted(() => {\n  authStore.logout();\n});\n\n</script>\n\n\n<style scoped>\n.sign-in-container {\n  max-width: 400px;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.input-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"password\"] {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n.register-link {\n  display: block;\n  margin-top: 20px;\n  color: #007BFF;\n  text-decoration: none;\n}\n\n.register-link:hover {\n  color: #0056b3;\n}\n\n</style>\n",
                        "CopyCode": "<template>\n  <div class=\"sign-in-container\">\n    <h1>Sign In</h1>\n    <form @submit.prevent=\"handleSignIn\">\n      <div class=\"input-group\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" v-model=\"username\" id=\"username\" required />\n      </div>\n      <div class=\"input-group\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" v-model=\"password\" id=\"password\" required />\n      </div>\n      <button type=\"submit\">Sign In</button>\n    </form>\n    <router-link to=\"/Register\" class=\"register-link\">Don't Have an Account? Sign up</router-link>\n\n    <p v-if=\"errorMessage\">{{ errorMessage }}</p>\n  </div>\n</template>\n\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport { loginExistingUser } from \"../services/userService\";\nimport { useRouter } from 'vue-router';\nimport { useAuthStore } from \"../stores/auth\";\n\nconst router = useRouter();\nconst authStore = useAuthStore();\n\nconst username = ref('');\nconst password = ref('');\nconst errorMessage = ref('');\n\nconst handleSignIn = async () => {\n  try {\n    const userData = { username: username.value, password: password.value };\n    const response = await loginExistingUser(userData);\n    \n    if (response && response.user) {\n      authStore.logout();\n      authStore.login(response.user);\n      router.push('/Dashboard');\n    } else {\n      errorMessage.value = \"Invalid username or password\";\n    }\n  } catch (error) {\n    console.error(error);\n    errorMessage.value = \"An error occurred during sign-in\";\n  }\n};\n\nonMounted(() => {\n  authStore.logout();\n});\n\n</script>\n\n\n<style scoped>\n.sign-in-container {\n  max-width: 400px;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.input-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"password\"] {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n.register-link {\n  display: block;\n  margin-top: 20px;\n  color: #007BFF;\n  text-decoration: none;\n}\n\n.register-link:hover {\n  color: #0056b3;\n}\n\n</style>\n"
                    }
                },
                {
                    "id": 24,
                    "instruction": "In the \"src/views\" folder open the \"SignUp.vue\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "HTML",
                        "DisplayLang": "Vue",
                        "FormatCode": "<template>\n  <div class=\"register-container\">\n    <h1>Register</h1>\n    <form @submit.prevent=\"handleRegister\">\n      <div class=\"input-group\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" v-model=\"name\" id=\"name\" required />\n      </div>\n      <div class=\"input-group\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" v-model=\"email\" id=\"email\" required />\n      </div>\n      <div class=\"input-group\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" v-model=\"password\" id=\"password\" required />\n      </div>\n      <button type=\"submit\">Register</button>\n    </form>\n    <router-link to=\"/\" class=\"sign-in-link\">Already Have an Account? Sign In</router-link>\n\n    <p v-if=\"errorMessage\">{{ errorMessage }}</p>\n  </div>\n</template>\n\n\n<script setup>\nimport { ref } from 'vue';\nimport { createNewUser, loginExistingUser } from \"../services/userService\";\nimport { useRouter } from 'vue-router';\nimport { useAuthStore } from \"../stores/auth\";\n\nconst router = useRouter();\nconst authStore = useAuthStore();\n\nconst name = ref('');\nconst email = ref('');\nconst password = ref('');\nconst errorMessage = ref('');\n\nconst handleRegister = async () => {\n  try {\n    const userData = { username: name.value, email: email.value, password: password.value };\n    const response = await createNewUser(userData);\n\n    if (response && !response.error) {\n      const loginResponse = await loginExistingUser({ username: name.value, password: password.value });\n\n      if (loginResponse && loginResponse.user) {\n        authStore.logout();\n        authStore.login(loginResponse.user);\n        router.push('/Dashboard');\n      } else {\n        errorMessage.value = \"Failed to log in after registration\";\n      }\n    } else {\n      errorMessage.value = response.error || \"Registration failed\";\n    }\n  } catch (error) {\n    console.error(error);\n    errorMessage.value = \"An error occurred during registration\";\n  }\n};\n\n</script>\n\n\n<style scoped>\n.register-container {\n  max-width: 400px;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.input-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"email\"],\ninput[type=\"password\"] {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n.sign-in-link {\n  display: block;\n  margin-top: 20px;\n  color: #007BFF;\n  text-decoration: none;\n}\n\n.sign-in-link:hover {\n  color: #0056b3;\n}\n</style>\n",
                        "CopyCode": "<template>\n  <div class=\"register-container\">\n    <h1>Register</h1>\n    <form @submit.prevent=\"handleRegister\">\n      <div class=\"input-group\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" v-model=\"name\" id=\"name\" required />\n      </div>\n      <div class=\"input-group\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" v-model=\"email\" id=\"email\" required />\n      </div>\n      <div class=\"input-group\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" v-model=\"password\" id=\"password\" required />\n      </div>\n      <button type=\"submit\">Register</button>\n    </form>\n    <router-link to=\"/\" class=\"sign-in-link\">Already Have an Account? Sign In</router-link>\n\n    <p v-if=\"errorMessage\">{{ errorMessage }}</p>\n  </div>\n</template>\n\n\n<script setup>\nimport { ref } from 'vue';\nimport { createNewUser, loginExistingUser } from \"../services/userService\";\nimport { useRouter } from 'vue-router';\nimport { useAuthStore } from \"../stores/auth\";\n\nconst router = useRouter();\nconst authStore = useAuthStore();\n\nconst name = ref('');\nconst email = ref('');\nconst password = ref('');\nconst errorMessage = ref('');\n\nconst handleRegister = async () => {\n  try {\n    const userData = { username: name.value, email: email.value, password: password.value };\n    const response = await createNewUser(userData);\n\n    if (response && !response.error) {\n      const loginResponse = await loginExistingUser({ username: name.value, password: password.value });\n\n      if (loginResponse && loginResponse.user) {\n        authStore.logout();\n        authStore.login(loginResponse.user);\n        router.push('/Dashboard');\n      } else {\n        errorMessage.value = \"Failed to log in after registration\";\n      }\n    } else {\n      errorMessage.value = response.error || \"Registration failed\";\n    }\n  } catch (error) {\n    console.error(error);\n    errorMessage.value = \"An error occurred during registration\";\n  }\n};\n\n</script>\n\n\n<style scoped>\n.register-container {\n  max-width: 400px;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.input-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"email\"],\ninput[type=\"password\"] {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n.sign-in-link {\n  display: block;\n  margin-top: 20px;\n  color: #007BFF;\n  text-decoration: none;\n}\n\n.sign-in-link:hover {\n  color: #0056b3;\n}\n</style>\n"
                    }
                },
                {
                    "id": 25,
                    "instruction": "In the \"src/views\" folder open the \"Starred.vue\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "HTML",
                        "DisplayLang": "Vue",
                        "FormatCode": "<template>\n  <p>Starred Notes</p>\n  <div v-for=\"note in noteStore.getStarredNotes()\" :key=\"note.id\">\n    <NoteCard :note=\"note\" />\n  </div>\n</template>\n\n\n<script setup>\nimport { useNotesStore } from \"../stores/starred\";\nimport NoteCard from \"../components/NotesCard.vue\";\n\nconst noteStore = useNotesStore();\n\n</script>\n\n",
                        "CopyCode": "<template>\n  <p>Starred Notes</p>\n  <div v-for=\"note in noteStore.getStarredNotes()\" :key=\"note.id\">\n    <NoteCard :note=\"note\" />\n  </div>\n</template>\n\n\n<script setup>\nimport { useNotesStore } from \"../stores/starred\";\nimport NoteCard from \"../components/NotesCard.vue\";\n\nconst noteStore = useNotesStore();\n\n</script>\n\n"
                    }
                },
                {
                    "id": 26,
                    "instruction": "In the \"src\" folder open the \"App.vue\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "HTML",
                        "DisplayLang": "Vue",
                        "FormatCode": "<template>\n  <router-view />\n</template>\n\n\n<style>\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n    background-color: lightblue;\n}\n\n</style>",
                        "CopyCode": "<template>\n  <router-view />\n</template>\n\n\n<style>\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n\tbackground-color: lightblue;\n}\n\n</style>"
                    }
                },
                {
                    "id": 27,
                    "instruction": "In the \"src\" folder open the \"main.js\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "FormatCode": "import { createApp } from 'vue'\nimport App from './App.vue'\nimport { createPinia } from 'pinia';\nimport router from './router'\n\nconst app = createApp(App)\n\napp.use(router)\napp.use(createPinia())\napp.mount('#app');",
                        "CopyCode": "import { createApp } from 'vue'\nimport App from './App.vue'\nimport { createPinia } from 'pinia';\nimport router from './router'\n\nconst app = createApp(App)\n\napp.use(router)\napp.use(createPinia())\napp.mount('#app');"
                    }
                },
                {
                    "id": 28,
                    "instruction": "Now before we run our app connect to the database and run the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql -U postgres\n\\c notesapp_db notes_app_user\nTRUNCATE TABLE Users, Tags, Notes CASCADE;\nALTER SEQUENCE users_user_id_seq RESTART WITH 1;\nALTER SEQUENCE tags_tag_id_seq RESTART WITH 1;\nALTER SEQUENCE notes_note_id_seq RESTART WITH 1;",
                        "CopyCode": "psql -U postgres\n\\c notesapp_db notes_app_user\nTRUNCATE TABLE Users, Tags, Notes CASCADE;\nALTER SEQUENCE users_user_id_seq RESTART WITH 1;\nALTER SEQUENCE tags_tag_id_seq RESTART WITH 1;\nALTER SEQUENCE notes_note_id_seq RESTART WITH 1;"
                    }
                },
                {
                    "id": 29,
                    "instruction": "Now populate your Users table using the SQL statements.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "INSERT INTO Users (username, email, password_hash) \nVALUES \n('john_doe', 'john.doe@example.com', 'scrypt:32768:8:1$zuQhyeNXzf7H365N$3bc7b087d3d68d33b8ac72823cbe5fbb19f046c405177fa036d8cf0e691fe400e37222e3a55474d4b3fbcd10c6b9f30dc441c2656f24034c44a3734544bae22a'),\n('jane_smith', 'jane.smith@example.com', 'scrypt:32768:8:1$5yu7lFgr2igBvpQu$2142e8af9464b0b84a66b056fe5e99096694857bdaccceb58b1a0e6dbfe18efc2aac2bdd2410d6af14992e279810e32cab32b2a560e3a6e42cee836081a42ce8'), \n('alice_jones', 'alice.jones@example.com', 'scrypt:32768:8:1$EmSwLgvWpdRTmb4A$6a5490351c01147afe2fd860557e954c8aefee97850044d1066e3b4b2da8f14ee47217bb3fbfca778e4633f287c2e2d7b4d4f6b83ec433fce3b450a6d924084b'),\n('michael_jordan', 'michael.jordan@example.com', 'scrypt:32768:8:1$WPQ2jPm3lqRktjL9$64d9153e8fe7d3d415a509fa0faf8c09a09ee1cfea81dc186d3cca9f6461e64d2718bfc0b6af863ebbee4d4edbfdab0d94cefd0760e86132d019816fcec40ff2'), \n('tony_stark', 'tony.stark@example.com', 'scrypt:32768:8:1$61OfDa7X1yqcVC37$c9da94064c61c46a71cea1d1ebd161cd63150f6668e26c54e6f3de02a197841501620419d97219cc2a6087279cf6ff17483ab5e9a62999901953d86ca4a40f0d'), \n('chris_evans', 'chris.evans@example.com', 'scrypt:32768:8:1$jJarcDRVZ9BB0drh$dce199c34ac2166e5ef61fcb94887d4550472f9925c3b2886cadfee6c866dd9b3b11780101c0e6d394f7ac665dab51df80fd97b317ced71494b01c03f5533eed'), \n('harry_potter', 'harry.potter@example.com', 'scrypt:32768:8:1$DJ6tmu41VcIdAjKW$e11bbdb13a51a1521eb0d5835d750f9d8feced451f7e32b717c772ae5d4e8723a2ab6a055a94251fd9e40f9ec961e8d9faecf148d964926ad431cbcb77352c6e'), \n('james_bond', 'james.bond@example.com', 'scrypt:32768:8:1$mqLUxyWbp87cchHA$6189059f6be8add9161250a758509f36064f91222b3a0f86d1a656cf9f8492ef4df4e582f480d7905e06bf8295c4c4a3ef08e5fb7587c79b3b3ff43bf91ac594');",
                        "CopyCode": "INSERT INTO Users (username, email, password_hash) \nVALUES \n('john_doe', 'john.doe@example.com', 'scrypt:32768:8:1$zuQhyeNXzf7H365N$3bc7b087d3d68d33b8ac72823cbe5fbb19f046c405177fa036d8cf0e691fe400e37222e3a55474d4b3fbcd10c6b9f30dc441c2656f24034c44a3734544bae22a'),\n('jane_smith', 'jane.smith@example.com', 'scrypt:32768:8:1$5yu7lFgr2igBvpQu$2142e8af9464b0b84a66b056fe5e99096694857bdaccceb58b1a0e6dbfe18efc2aac2bdd2410d6af14992e279810e32cab32b2a560e3a6e42cee836081a42ce8'), \n('alice_jones', 'alice.jones@example.com', 'scrypt:32768:8:1$EmSwLgvWpdRTmb4A$6a5490351c01147afe2fd860557e954c8aefee97850044d1066e3b4b2da8f14ee47217bb3fbfca778e4633f287c2e2d7b4d4f6b83ec433fce3b450a6d924084b'),\n('michael_jordan', 'michael.jordan@example.com', 'scrypt:32768:8:1$WPQ2jPm3lqRktjL9$64d9153e8fe7d3d415a509fa0faf8c09a09ee1cfea81dc186d3cca9f6461e64d2718bfc0b6af863ebbee4d4edbfdab0d94cefd0760e86132d019816fcec40ff2'), \n('tony_stark', 'tony.stark@example.com', 'scrypt:32768:8:1$61OfDa7X1yqcVC37$c9da94064c61c46a71cea1d1ebd161cd63150f6668e26c54e6f3de02a197841501620419d97219cc2a6087279cf6ff17483ab5e9a62999901953d86ca4a40f0d'), \n('chris_evans', 'chris.evans@example.com', 'scrypt:32768:8:1$jJarcDRVZ9BB0drh$dce199c34ac2166e5ef61fcb94887d4550472f9925c3b2886cadfee6c866dd9b3b11780101c0e6d394f7ac665dab51df80fd97b317ced71494b01c03f5533eed'), \n('harry_potter', 'harry.potter@example.com', 'scrypt:32768:8:1$DJ6tmu41VcIdAjKW$e11bbdb13a51a1521eb0d5835d750f9d8feced451f7e32b717c772ae5d4e8723a2ab6a055a94251fd9e40f9ec961e8d9faecf148d964926ad431cbcb77352c6e'), \n('james_bond', 'james.bond@example.com', 'scrypt:32768:8:1$mqLUxyWbp87cchHA$6189059f6be8add9161250a758509f36064f91222b3a0f86d1a656cf9f8492ef4df4e582f480d7905e06bf8295c4c4a3ef08e5fb7587c79b3b3ff43bf91ac594');"
                    }
                },
                {
                    "id": 30,
                    "instruction": "Now your Tags table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "INSERT INTO Tags (name)\nVALUES \n('Work'),\n('Personal'),\n('Travel'),\n('Food'),\n('Books');",
                        "CopyCode": "INSERT INTO Tags (name)\nVALUES \n('Work'),\n('Personal'),\n('Travel'),\n('Food'),\n('Books');"
                    }
                },
                {
                    "id": 31,
                    "instruction": "Now your Notes table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "INSERT INTO Notes (title, content, user_id)\nVALUES \n('Meeting Notes', 'Discussed project milestones and deadlines.', 1),\n('Shopping List', 'Eggs, Milk, Bread, Butter', 1),\n('Daily Journal', 'Today I worked on my project and had a great lunch.', 1),\n('Recipe Ideas', 'Spaghetti Carbonara, Grilled Chicken, Caesar Salad', 1),\n('Books to Read', 'The Great Gatsby, 1984, To Kill a Mockingbird', 1),\n('Travel Plans', 'Flight to NYC on Monday, Hotel reservation at Grand Hotel.', 2);",
                        "CopyCode": "INSERT INTO Notes (title, content, user_id)\nVALUES \n('Meeting Notes', 'Discussed project milestones and deadlines.', 1),\n('Shopping List', 'Eggs, Milk, Bread, Butter', 1),\n('Daily Journal', 'Today I worked on my project and had a great lunch.', 1),\n('Recipe Ideas', 'Spaghetti Carbonara, Grilled Chicken, Caesar Salad', 1),\n('Books to Read', 'The Great Gatsby, 1984, To Kill a Mockingbird', 1),\n('Travel Plans', 'Flight to NYC on Monday, Hotel reservation at Grand Hotel.', 2);"
                    }
                },
                {
                    "id": 32,
                    "instruction": "Now your Note_tags table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "INSERT INTO Note_Tags (note_id, tag_id)\nVALUES \n(1, 1),\n(2, 2),\n(3, 2),\n(4, 4),\n(5, 5),\n(6, 3);",
                        "CopyCode": "INSERT INTO Note_Tags (note_id, tag_id)\nVALUES \n(1, 1),\n(2, 2),\n(3, 2),\n(4, 4),\n(5, 5),\n(6, 3);"
                    }
                },
                {
                    "id": 33,
                    "instruction": "If you were to run your Rest Api and Frontend right now you would probably get the following CORS Error.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "CORS Error Message",
                        "FormatCode": "Access to XMLHttpRequest at 'http://127.0.0.1:5000/users/login' from origin 'http://localhost:5173' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.",
                        "CopyCode": "Access to XMLHttpRequest at 'http://127.0.0.1:5000/users/login' from origin 'http://localhost:5173' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource."
                    }
                },
                {
                    "id": 34,
                    "instruction": "To avoid this open your \"Notes-Rest-API\" and go to \"app.py\" in the top-most directory. We're going to replace the line below.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "DisplayLang": "Line to Replace",
                        "FormatCode": "CORS(app, resources={r'/*': {'origins': '*'}})",
                        "CopyCode": "CORS(app, resources={r'/*': {'origins': '*'}})"
                    }
                },
                {
                    "id": 35,
                    "instruction": "Now open your terminal and run the following commands. Copy and record the links that are output from them.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Frontend\nnpm run dev\ncd ~\n\n\ncd Notes-Rest-Api\nsource venv/bin/activate\nflask run",
                        "CopyCode": "cd Notes-Frontend\nnpm run dev\ncd ~\n\n\ncd Notes-Rest-Api\nsource venv/bin/activate\nflask run"
                    }
                },
                {
                    "id": 36,
                    "instruction": "Close your terminal and go back to app.py. Replace the line from step 33 with the following line. The origin links should be your Frontend and Rest Api links.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "CORS(app, resources={r'/*': {'origins': [\n    'http://127.0.0.1:5000',\n    'http://localhost:5173',\n    'http://localhost:5174'\n]}})",
                        "CopyCode": "CORS(app, resources={r'/*': {'origins': [\n    'http://127.0.0.1:5000',\n    'http://localhost:5173',\n    'http://localhost:5174'\n]}})"
                    }
                },
                {
                    "id": 37,
                    "instruction": "Now close your broswer and open a new one. We're now going to run our Rest API. The CORS policy should now work."
                },
                {
                    "id": 38,
                    "instruction": "Open a terminal and run your Rest API.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Rest-Api\nsource venv/bin/activate\nflask run",
                        "CopyCode": "cd Notes-Rest-Api\nsource venv/bin/activate\nflask run"
                    }
                },
                {
                    "id": 39,
                    "instruction": "Leave the other terminal running, but open another one. Run your frontend and open the link in your broswer",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "",
                        "FormatCode": "cd Notes-Frontend\nnpm run dev",
                        "CopyCode": "cd Notes-Frontend\nnpm run dev"
                    }
                },
                {
                    "id": 40,
                    "instruction": "Sign in with this test user.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "User Credentials",
                        "FormatCode": "username: john_doe\npassword: password1",
                        "CopyCode": "username: john_doe\npassword: password1"
                    }
                },
                {
                    "id": 41,
                    "instruction": "You can See changes to your User table using the following commands",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql -U postgres\n\\c notesapp_db notes_app_user\nSELECT user_id, username, email, created_at FROM Users;",
                        "CopyCode": "psql -U postgres\n\\c notesapp_db notes_app_user\nSELECT user_id, username, email, created_at FROM Users;"
                    }
                },
                {
                    "id": 42,
                    "instruction": "You shuld now be done creating the frontend. Push your changes to Github. We'll implement testing in the next section.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Frontend\ngit add .\ngit commit -m \"Implemented Frontend\"\ngit push",
                        "CopyCode": "cd Notes-Frontend\ngit add .\ngit commit -m \"Implemented Frontend\"\ngit push"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Add Testing to your Frontend UI",
                    "desc": "Explains how to write tests using the Jest framework for your front end."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Create a testing foler in your project and add the necessary files",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Frontend \ntouch jest.config.cjs\ntouch babel.config.cjs\nmkdir src/testing\ntouch src/testing/sign-in.test.js",
                        "CopyCode": "cd Notes-Frontend \ntouch jest.config.cjs\ntouch babel.config.cjs\nmkdir src/testing\ntouch src/testing/sign-in.test.js"
                    }
                },
                {
                    "id": 2,
                    "instruction": "Install jest in your project",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "npm install --save-dev jest @vue/test-utils @vue/vue3-jest babel-jest @babel/core @babel/preset-env\nnpm install jest-environment-jsdom",
                        "CopyCode": "npm install --save-dev jest @vue/test-utils @vue/vue3-jest babel-jest @babel/core @babel/preset-env\nnpm install jest-environment-jsdom"
                    }
                },
                {
                    "id": 3,
                    "instruction": "Run the following commands so that you won't get an error about how Punycode is depricated.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "nvm install 20.5.1\nnvm use 20.5.1",
                        "CopyCode": "nvm install 20.5.1\nnvm use 20.5.1"
                    }
                },
                {
                    "id": 4,
                    "instruction": "Open the \"jest.config.cjs\" file and paste in the following code. ",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "FormatCode": "module.exports = {\n  moduleFileExtensions: ['js', 'json', 'vue'],\n  transform: {\n    '^.+\\\\.vue$': '@vue/vue3-jest',\n    '^.+\\\\.js$': 'babel-jest',\n  },\n  testMatch: [\n    '**/tests/**/*.spec.(js|jsx|ts|tsx)',\n    '**/?(*.)+(spec|test).[jt]s?(x)',\n  ],\n  testEnvironment: 'jsdom',\n  transformIgnorePatterns: [\n    '/node_modules/',\n  ],\n  testEnvironmentOptions: {\n    customExportConditions: [\"node\", \"node-addons\"],\n },\n};",
                        "CopyCode": "module.exports = {\n  moduleFileExtensions: ['js', 'json', 'vue'],\n  transform: {\n    '^.+\\\\.vue$': '@vue/vue3-jest',\n    '^.+\\\\.js$': 'babel-jest',\n  },\n  testMatch: [\n    '**/tests/**/*.spec.(js|jsx|ts|tsx)',\n    '**/?(*.)+(spec|test).[jt]s?(x)',\n  ],\n  testEnvironment: 'jsdom',\n  transformIgnorePatterns: [\n    '/node_modules/',\n  ],\n  testEnvironmentOptions: {\n    customExportConditions: [\"node\", \"node-addons\"],\n },\n};"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Open the \"babel.config.js\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "FormatCode": "module.exports = {\n  presets: [\n    ['@babel/preset-env', { targets: { node: 'current' } }],\n  ],\n};",
                        "CopyCode": "module.exports = {\n  presets: [\n    ['@babel/preset-env', { targets: { node: 'current' } }],\n  ],\n};"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Open your \"Package.json\" file. Add the following \"test\" attribute in the \"scripts\" array.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JSON",
                        "FormatCode": "\"scripts\": {\n  \"test\": \"jest\"\n},",
                        "CopyCode": "\"scripts\": {\n  \"test\": \"jest\"\n},"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Now go to \"src/testing\" and open \"sign-in.test.js\". Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "FormatCode": "import { shallowMount } from '@vue/test-utils';\nimport { createRouter, createWebHistory } from 'vue-router';\nimport { createPinia, setActivePinia } from 'pinia';\nimport SignInView from '../../src/views/SignIn.vue';\n\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes: [\n    { path: '/', component: SignInView },\n  ],\n});\n\ndescribe('SignIn Component', () => {\n  beforeEach(() => {\n    setActivePinia(createPinia());\n  });\n\n  it('should render correctly', async () => {\n    const wrapper = shallowMount(SignInView, {\n      global: {\n        plugins: [router, createPinia()],\n      },\n    });\n\n    await router.isReady();\n\n    expect(wrapper.exists()).toBe(true);\n  });\n});",
                        "CopyCode": "import { shallowMount } from '@vue/test-utils';\nimport { createRouter, createWebHistory } from 'vue-router';\nimport { createPinia, setActivePinia } from 'pinia';\nimport SignInView from '../../src/views/SignIn.vue';\n\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes: [\n    { path: '/', component: SignInView },\n  ],\n});\n\ndescribe('SignIn Component', () => {\n  beforeEach(() => {\n    setActivePinia(createPinia());\n  });\n\n  it('should render correctly', async () => {\n    const wrapper = shallowMount(SignInView, {\n      global: {\n        plugins: [router, createPinia()],\n      },\n    });\n\n    await router.isReady();\n\n    expect(wrapper.exists()).toBe(true);\n  });\n});"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Go to your terminal and run your test",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Frontend \nnpm test",
                        "CopyCode": "cd Notes-Frontend \nnpm test"
                    }
                },
                {
                    "id": 9,
                    "instruction": "You now should be done setting up the project. We'll deploy it to Amazon Web Services in the &Deploy the Vue, Flask and PostgreSQL app to Amazon Web Services&[DeployPostLink] instruction set."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "CSC 450 Workflow",
                    "desc": "Explanation of CSC 450 Workflow."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "The Git workflow is a somewhat big part of the project."
                },
                {
                    "id": 2,
                    "instruction": "Go (here)[/CompSci/GitHub] to see a description and the commands for the CSC 450 workflow"
                },
                {
                    "id": 3,
                    "instruction": "Let me know if you have any questions."
                }
            ]
        }
    ]
}